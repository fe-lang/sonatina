---
source: crates/parser/tests/syntax.rs
assertion_line: 53
input_file: test_files/syntax/func/erc20.sntn
---
function "func public %main() {
  block0:
    v0.i256 = evm_contract_size %constructor;
    v1.i256 = evm_contract_size %entrypoint;
    v2.i256 = add v0 v1;
    v3.i256 = get_function_ptr %entrypoint;
    evm_codecopy 0.i256 v2 v2;
}"
  function_signature "func public %main() "
    linkage "public"
    function_identifier "%main"
      function_name "main"
    function_params "()"
  block "block0:
      v0.i256 = evm_contract_size %constructor;
      v1.i256 = evm_contract_size %entrypoint;
      v2.i256 = add v0 v1;
      v3.i256 = get_function_ptr %entrypoint;
      evm_codecopy 0.i256 v2 v2;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i256 = evm_contract_size %constructor;"
      assign_stmt "v0.i256 = evm_contract_size %constructor"
        value_declaration "v0.i256"
          value_name "v0"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %constructor"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%constructor"
            function_identifier "%constructor"
              function_name "constructor"
    stmt "v1.i256 = evm_contract_size %entrypoint;"
      assign_stmt "v1.i256 = evm_contract_size %entrypoint"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %entrypoint"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "v2.i256 = add v0 v1;"
      assign_stmt "v2.i256 = add v0 v1"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "add v0 v1"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v3.i256 = get_function_ptr %entrypoint;"
      assign_stmt "v3.i256 = get_function_ptr %entrypoint"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "get_function_ptr %entrypoint"
          inst_name "get_function_ptr"
            inst_identifier "get_function_ptr"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "evm_codecopy 0.i256 v2 v2;"
      inst_stmt "evm_codecopy 0.i256 v2 v2"
        inst "evm_codecopy 0.i256 v2 v2"
          inst_name "evm_codecopy"
            inst_identifier "evm_codecopy"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v2"
            value "v2"
              value_name "v2"
function "func private %constructor() {
  block0:
    v0.i128 = evm_caller;
    v2.i256 = evm_malloc 64.i256;
    v3.i256 = add v2 32.i256;
    evm_mstore v2 v0;
    evm_mstore v3 $MONEYBAG;
    v1.i256 = evm_keccak256 v2 64.i256;
    evm_sstore v1 1000000000000000000000.i256;
    v4.i256 = evm_malloc 32.i256;
    evm_mstore v4 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
    v5.i128 = evm_caller;
    evm_log4 v4 32.i256 v0 v5 v1000000000000000000000;
}"
  function_signature "func private %constructor() "
    linkage "private"
    function_identifier "%constructor"
      function_name "constructor"
    function_params "()"
  block "block0:
      v0.i128 = evm_caller;
      v2.i256 = evm_malloc 64.i256;
      v3.i256 = add v2 32.i256;
      evm_mstore v2 v0;
      evm_mstore v3 $MONEYBAG;
      v1.i256 = evm_keccak256 v2 64.i256;
      evm_sstore v1 1000000000000000000000.i256;
      v4.i256 = evm_malloc 32.i256;
      evm_mstore v4 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
      v5.i128 = evm_caller;
      evm_log4 v4 32.i256 v0 v5 v1000000000000000000000;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i128 = evm_caller;"
      assign_stmt "v0.i128 = evm_caller"
        value_declaration "v0.i128"
          value_name "v0"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v2.i256 = evm_malloc 64.i256;"
      assign_stmt "v2.i256 = evm_malloc 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v3.i256 = add v2 32.i256;"
      assign_stmt "v3.i256 = add v2 32.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "add v2 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v2 v0;"
      inst_stmt "evm_mstore v2 v0"
        inst "evm_mstore v2 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v3 $MONEYBAG;"
      inst_stmt "evm_mstore v3 $MONEYBAG"
        inst "evm_mstore v3 $MONEYBAG"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "$MONEYBAG"
            value "$MONEYBAG"
              global_value "$MONEYBAG"
                gv_identifier "$MONEYBAG"
                  gv_name "MONEYBAG"
    stmt "v1.i256 = evm_keccak256 v2 64.i256;"
      assign_stmt "v1.i256 = evm_keccak256 v2 64.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v2 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v1 1000000000000000000000.i256;"
      inst_stmt "evm_sstore v1 1000000000000000000000.i256"
        inst "evm_sstore v1 1000000000000000000000.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "1000000000000000000000.i256"
            value "1000000000000000000000.i256"
              imm_number "1000000000000000000000.i256"
                decimal "1000000000000000000000"
                primitive_type "i256"
    stmt "v4.i256 = evm_malloc 32.i256;"
      assign_stmt "v4.i256 = evm_malloc 32.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v4 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;"
      inst_stmt "evm_mstore v4 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
        inst "evm_mstore v4 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
            value "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
              imm_number "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
                hex "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
                primitive_type "i256"
    stmt "v5.i128 = evm_caller;"
      assign_stmt "v5.i128 = evm_caller"
        value_declaration "v5.i128"
          value_name "v5"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "evm_log4 v4 32.i256 v0 v5 v1000000000000000000000;"
      inst_stmt "evm_log4 v4 32.i256 v0 v5 v1000000000000000000000"
        inst "evm_log4 v4 32.i256 v0 v5 v1000000000000000000000"
          inst_name "evm_log4"
            inst_identifier "evm_log4"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "v1000000000000000000000"
            value "v1000000000000000000000"
              value_name "v1000000000000000000000"
