---
source: crates/parser/tests/syntax.rs
assertion_line: 53
input_file: test_files/syntax/func/minimal_dex.sntn
---
function "func public %main() {
  block0:
    v0.i256 = evm_contract_size %constructor;
    v1.i256 = evm_contract_size %entrypoint;
    v2.i256 = add v0 v1;
    v3.i256 = get_function_ptr %entrypoint;
    evm_codecopy 0.i256 v2 v2;
}"
  function_signature "func public %main() "
    linkage "public"
    function_identifier "%main"
      function_name "main"
    function_params "()"
  block "block0:
      v0.i256 = evm_contract_size %constructor;
      v1.i256 = evm_contract_size %entrypoint;
      v2.i256 = add v0 v1;
      v3.i256 = get_function_ptr %entrypoint;
      evm_codecopy 0.i256 v2 v2;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i256 = evm_contract_size %constructor;"
      assign_stmt "v0.i256 = evm_contract_size %constructor"
        value_declaration "v0.i256"
          value_name "v0"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %constructor"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%constructor"
            function_identifier "%constructor"
              function_name "constructor"
    stmt "v1.i256 = evm_contract_size %entrypoint;"
      assign_stmt "v1.i256 = evm_contract_size %entrypoint"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %entrypoint"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "v2.i256 = add v0 v1;"
      assign_stmt "v2.i256 = add v0 v1"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "add v0 v1"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v3.i256 = get_function_ptr %entrypoint;"
      assign_stmt "v3.i256 = get_function_ptr %entrypoint"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "get_function_ptr %entrypoint"
          inst_name "get_function_ptr"
            inst_identifier "get_function_ptr"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "evm_codecopy 0.i256 v2 v2;"
      inst_stmt "evm_codecopy 0.i256 v2 v2"
        inst "evm_codecopy 0.i256 v2 v2"
          inst_name "evm_codecopy"
            inst_identifier "evm_codecopy"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v2"
            value "v2"
              value_name "v2"
function "func private %constructor() {
  block0:
    evm_sstore $ABUTTON 628667909239287451661015376509548196714548376546.i256;
    evm_sstore $BBUTTON 685366776837966076677698750584726113278029506952.i256;
    evm_sstore $MONEY_MOUTHFACE 1889567281.i256;
    evm_sstore $MONEYWITHWINGS 2835717307.i256;
    evm_sstore $ATMSIGN 599290589.i256;
}"
  function_signature "func private %constructor() "
    linkage "private"
    function_identifier "%constructor"
      function_name "constructor"
    function_params "()"
  block "block0:
      evm_sstore $ABUTTON 628667909239287451661015376509548196714548376546.i256;
      evm_sstore $BBUTTON 685366776837966076677698750584726113278029506952.i256;
      evm_sstore $MONEY_MOUTHFACE 1889567281.i256;
      evm_sstore $MONEYWITHWINGS 2835717307.i256;
      evm_sstore $ATMSIGN 599290589.i256;"
    block_ident "block0"
      block_number "0"
    stmt "evm_sstore $ABUTTON 628667909239287451661015376509548196714548376546.i256;"
      inst_stmt "evm_sstore $ABUTTON 628667909239287451661015376509548196714548376546.i256"
        inst "evm_sstore $ABUTTON 628667909239287451661015376509548196714548376546.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
          inst_arg "628667909239287451661015376509548196714548376546.i256"
            value "628667909239287451661015376509548196714548376546.i256"
              imm_number "628667909239287451661015376509548196714548376546.i256"
                decimal "628667909239287451661015376509548196714548376546"
                primitive_type "i256"
    stmt "evm_sstore $BBUTTON 685366776837966076677698750584726113278029506952.i256;"
      inst_stmt "evm_sstore $BBUTTON 685366776837966076677698750584726113278029506952.i256"
        inst "evm_sstore $BBUTTON 685366776837966076677698750584726113278029506952.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
          inst_arg "685366776837966076677698750584726113278029506952.i256"
            value "685366776837966076677698750584726113278029506952.i256"
              imm_number "685366776837966076677698750584726113278029506952.i256"
                decimal "685366776837966076677698750584726113278029506952"
                primitive_type "i256"
    stmt "evm_sstore $MONEY_MOUTHFACE 1889567281.i256;"
      inst_stmt "evm_sstore $MONEY_MOUTHFACE 1889567281.i256"
        inst "evm_sstore $MONEY_MOUTHFACE 1889567281.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$MONEY_MOUTHFACE"
            value "$MONEY_MOUTHFACE"
              global_value "$MONEY_MOUTHFACE"
                gv_identifier "$MONEY_MOUTHFACE"
                  gv_name "MONEY_MOUTHFACE"
          inst_arg "1889567281.i256"
            value "1889567281.i256"
              imm_number "1889567281.i256"
                decimal "1889567281"
                primitive_type "i256"
    stmt "evm_sstore $MONEYWITHWINGS 2835717307.i256;"
      inst_stmt "evm_sstore $MONEYWITHWINGS 2835717307.i256"
        inst "evm_sstore $MONEYWITHWINGS 2835717307.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$MONEYWITHWINGS"
            value "$MONEYWITHWINGS"
              global_value "$MONEYWITHWINGS"
                gv_identifier "$MONEYWITHWINGS"
                  gv_name "MONEYWITHWINGS"
          inst_arg "2835717307.i256"
            value "2835717307.i256"
              imm_number "2835717307.i256"
                decimal "2835717307"
                primitive_type "i256"
    stmt "evm_sstore $ATMSIGN 599290589.i256;"
      inst_stmt "evm_sstore $ATMSIGN 599290589.i256"
        inst "evm_sstore $ATMSIGN 599290589.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$ATMSIGN"
            value "$ATMSIGN"
              global_value "$ATMSIGN"
                gv_identifier "$ATMSIGN"
                  gv_name "ATMSIGN"
          inst_arg "599290589.i256"
            value "599290589.i256"
              imm_number "599290589.i256"
                decimal "599290589"
                primitive_type "i256"
function "func public %entrypoint() {
  block0:
    v0.i256 = evm_call_data_load 0.i256;
    v1.i256 = shr v0 224.i256;
    br_table v1 block1 (0xB4315E3B.i32 block2) (0xF176A237.i32 block3);
  block2:
    v2.i256 = evm_call_data_load 1.i8;
    v3.i256 = evm_call_data_load 2.i8;
    v4.i1 = call %aButtonBButton v2 v3;
    call %returnUint v4;
  block3:
    v5.i256 = evm_call_data_load 1.i8;
    v6.i256 = evm_call_data_load 2.i8;
    v7.i1 = call %bButtonAButton v5 v6;
    call %returnUint v7;
  block1:
    evm_revert 0.i256 0.i256;
}"
  function_signature "func public %entrypoint() "
    linkage "public"
    function_identifier "%entrypoint"
      function_name "entrypoint"
    function_params "()"
  block "block0:
      v0.i256 = evm_call_data_load 0.i256;
      v1.i256 = shr v0 224.i256;
      br_table v1 block1 (0xB4315E3B.i32 block2) (0xF176A237.i32 block3);"
    block_ident "block0"
      block_number "0"
    stmt "v0.i256 = evm_call_data_load 0.i256;"
      assign_stmt "v0.i256 = evm_call_data_load 0.i256"
        value_declaration "v0.i256"
          value_name "v0"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 0.i256"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v1.i256 = shr v0 224.i256;"
      assign_stmt "v1.i256 = shr v0 224.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "shr v0 224.i256"
          inst_name "shr"
            inst_identifier "shr"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "224.i256"
            value "224.i256"
              imm_number "224.i256"
                decimal "224"
                primitive_type "i256"
    stmt "br_table v1 block1 (0xB4315E3B.i32 block2) (0xF176A237.i32 block3);"
      inst_stmt "br_table v1 block1 (0xB4315E3B.i32 block2) (0xF176A237.i32 block3)"
        inst "br_table v1 block1 (0xB4315E3B.i32 block2) (0xF176A237.i32 block3)"
          inst_name "br_table"
            inst_identifier "br_table"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "(0xB4315E3B.i32 block2)"
            value_block_map "(0xB4315E3B.i32 block2)"
              value "0xB4315E3B.i32"
                imm_number "0xB4315E3B.i32"
                  hex "0xB4315E3B"
                  primitive_type "i32"
              block_ident "block2"
                block_number "2"
          inst_arg "(0xF176A237.i32 block3)"
            value_block_map "(0xF176A237.i32 block3)"
              value "0xF176A237.i32"
                imm_number "0xF176A237.i32"
                  hex "0xF176A237"
                  primitive_type "i32"
              block_ident "block3"
                block_number "3"
  block "block2:
      v2.i256 = evm_call_data_load 1.i8;
      v3.i256 = evm_call_data_load 2.i8;
      v4.i1 = call %aButtonBButton v2 v3;
      call %returnUint v4;"
    block_ident "block2"
      block_number "2"
    stmt "v2.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v2.i256 = evm_call_data_load 1.i8"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v3.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v3.i256 = evm_call_data_load 2.i8"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v4.i1 = call %aButtonBButton v2 v3;"
      assign_stmt "v4.i1 = call %aButtonBButton v2 v3"
        value_declaration "v4.i1"
          value_name "v4"
          type_name "i1"
            primitive_type "i1"
        inst "call %aButtonBButton v2 v3"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%aButtonBButton"
            function_identifier "%aButtonBButton"
              function_name "aButtonBButton"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "call %returnUint v4;"
      inst_stmt "call %returnUint v4"
        inst "call %returnUint v4"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v4"
            value "v4"
              value_name "v4"
  block "block3:
      v5.i256 = evm_call_data_load 1.i8;
      v6.i256 = evm_call_data_load 2.i8;
      v7.i1 = call %bButtonAButton v5 v6;
      call %returnUint v7;"
    block_ident "block3"
      block_number "3"
    stmt "v5.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v5.i256 = evm_call_data_load 1.i8"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v6.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v6.i256 = evm_call_data_load 2.i8"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v7.i1 = call %bButtonAButton v5 v6;"
      assign_stmt "v7.i1 = call %bButtonAButton v5 v6"
        value_declaration "v7.i1"
          value_name "v7"
          type_name "i1"
            primitive_type "i1"
        inst "call %bButtonAButton v5 v6"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%bButtonAButton"
            function_identifier "%bButtonAButton"
              function_name "bButtonAButton"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "v6"
            value "v6"
              value_name "v6"
    stmt "call %returnUint v7;"
      inst_stmt "call %returnUint v7"
        inst "call %returnUint v7"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v7"
            value "v7"
              value_name "v7"
  block "block1:
      evm_revert 0.i256 0.i256;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
function "func private %aButtonBButton(v0.i256, v1.i256) -> i1 {
  block0:
    v2.i128 = evm_sload $ABUTTON;
    v3.i256 = evm_address;
    v4.i256 = evm_malloc 32.i256;
    mstore v4 v3;
    v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;
    br v5 block1 block2;
  block2:
    evm_revert 0.i256 0.i256;
  block1:
    v6.i128 = evm_sload $BBUTTON;
    v7.i256 = evm_address;
    v8.i256 = evm_malloc 32.i256;
    mstore v8 v7;
    v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;
    br v9 block3 block4;
  block4:
    evm_revert 0.i256 0.i256;
  block3:
    v10.i256 = mul 0.i256 0.i256;
    v11.i128 = evm_sload $ABUTTON;
    v12.i128 = evm_caller;
    v13.i256 = evm_malloc 32.i256;
    mstore v13 v12;
    v14.i256 = evm_address;
    v15.i256 = evm_malloc 32.i256;
    mstore v15 v14;
    v16.i256 = evm_malloc 32.i256;
    mstore v16 v0;
    v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;
    br v17 block5 block6;
  block6:
    evm_revert 0.i256 0.i256;
  block5:
    v18.i128 = evm_sload $BBUTTON;
    v19.i128 = evm_caller;
    v20.i256 = evm_malloc 32.i256;
    mstore v20 v19;
    v21.i256 = evm_malloc 32.i256;
    mstore v21 v1;
    v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;
    br v22 block7 block8;
  block8:
    evm_revert 0.i256 0.i256;
  block7:
    v23.i128 = evm_sload $ABUTTON;
    v24.i256 = evm_address;
    v25.i256 = evm_malloc 32.i256;
    mstore v25 v24;
    v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;
    br v26 block9 block10;
  block10:
    evm_revert 0.i256 0.i256;
  block9:
    v27.i128 = evm_sload $BBUTTON;
    v28.i256 = evm_address;
    v29.i256 = evm_malloc 32.i256;
    mstore v29 v28;
    v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;
    br v30 block11 block12;
  block12:
    evm_revert 0.i256 0.i256;
  block11:
    v31.i256 = mul 0.i256 0.i256;
    v32.i256 = lt v31 v10;
    br v32 block13 block14;
  block13:
    evm_revert 0.i256 0.i256;
    jump block14;
  block14:
    return 1.i1;
}"
  function_signature "func private %aButtonBButton(v0.i256, v1.i256) -> i1"
    linkage "private"
    function_identifier "%aButtonBButton"
      function_name "aButtonBButton"
    function_params "(v0.i256, v1.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
      value_declaration "v1.i256"
        value_name "v1"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v2.i128 = evm_sload $ABUTTON;
      v3.i256 = evm_address;
      v4.i256 = evm_malloc 32.i256;
      mstore v4 v3;
      v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;
      br v5 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i128 = evm_sload $ABUTTON;"
      assign_stmt "v2.i128 = evm_sload $ABUTTON"
        value_declaration "v2.i128"
          value_name "v2"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v3.i256 = evm_address;"
      assign_stmt "v3.i256 = evm_address"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v4.i256 = evm_malloc 32.i256;"
      assign_stmt "v4.i256 = evm_malloc 32.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v4 v3;"
      inst_stmt "mstore v4 v3"
        inst "mstore v4 v3"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;"
      assign_stmt "v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v5 block1 block2;"
      inst_stmt "br v5 block1 block2"
        inst "br v5 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      evm_revert 0.i256 0.i256;"
    block_ident "block2"
      block_number "2"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block1:
      v6.i128 = evm_sload $BBUTTON;
      v7.i256 = evm_address;
      v8.i256 = evm_malloc 32.i256;
      mstore v8 v7;
      v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;
      br v9 block3 block4;"
    block_ident "block1"
      block_number "1"
    stmt "v6.i128 = evm_sload $BBUTTON;"
      assign_stmt "v6.i128 = evm_sload $BBUTTON"
        value_declaration "v6.i128"
          value_name "v6"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v7.i256 = evm_address;"
      assign_stmt "v7.i256 = evm_address"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v8.i256 = evm_malloc 32.i256;"
      assign_stmt "v8.i256 = evm_malloc 32.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v8 v7;"
      inst_stmt "mstore v8 v7"
        inst "mstore v8 v7"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "v7"
            value "v7"
              value_name "v7"
    stmt "v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;"
      assign_stmt "v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v9 block3 block4;"
      inst_stmt "br v9 block3 block4"
        inst "br v9 block3 block4"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "block3"
            block_ident "block3"
              block_number "3"
          inst_arg "block4"
            block_ident "block4"
              block_number "4"
  block "block4:
      evm_revert 0.i256 0.i256;"
    block_ident "block4"
      block_number "4"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block3:
      v10.i256 = mul 0.i256 0.i256;
      v11.i128 = evm_sload $ABUTTON;
      v12.i128 = evm_caller;
      v13.i256 = evm_malloc 32.i256;
      mstore v13 v12;
      v14.i256 = evm_address;
      v15.i256 = evm_malloc 32.i256;
      mstore v15 v14;
      v16.i256 = evm_malloc 32.i256;
      mstore v16 v0;
      v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;
      br v17 block5 block6;"
    block_ident "block3"
      block_number "3"
    stmt "v10.i256 = mul 0.i256 0.i256;"
      assign_stmt "v10.i256 = mul 0.i256 0.i256"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "mul 0.i256 0.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v11.i128 = evm_sload $ABUTTON;"
      assign_stmt "v11.i128 = evm_sload $ABUTTON"
        value_declaration "v11.i128"
          value_name "v11"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v12.i128 = evm_caller;"
      assign_stmt "v12.i128 = evm_caller"
        value_declaration "v12.i128"
          value_name "v12"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v13.i256 = evm_malloc 32.i256;"
      assign_stmt "v13.i256 = evm_malloc 32.i256"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v13 v12;"
      inst_stmt "mstore v13 v12"
        inst "mstore v13 v12"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "v12"
            value "v12"
              value_name "v12"
    stmt "v14.i256 = evm_address;"
      assign_stmt "v14.i256 = evm_address"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v15.i256 = evm_malloc 32.i256;"
      assign_stmt "v15.i256 = evm_malloc 32.i256"
        value_declaration "v15.i256"
          value_name "v15"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v15 v14;"
      inst_stmt "mstore v15 v14"
        inst "mstore v15 v14"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v15"
            value "v15"
              value_name "v15"
          inst_arg "v14"
            value "v14"
              value_name "v14"
    stmt "v16.i256 = evm_malloc 32.i256;"
      assign_stmt "v16.i256 = evm_malloc 32.i256"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v16 v0;"
      inst_stmt "mstore v16 v0"
        inst "mstore v16 v0"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v16"
            value "v16"
              value_name "v16"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;"
      assign_stmt "v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256"
        value_declaration "v17.i256"
          value_name "v17"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "84.i256"
            value "84.i256"
              imm_number "84.i256"
                decimal "84"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v17 block5 block6;"
      inst_stmt "br v17 block5 block6"
        inst "br v17 block5 block6"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v17"
            value "v17"
              value_name "v17"
          inst_arg "block5"
            block_ident "block5"
              block_number "5"
          inst_arg "block6"
            block_ident "block6"
              block_number "6"
  block "block6:
      evm_revert 0.i256 0.i256;"
    block_ident "block6"
      block_number "6"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block5:
      v18.i128 = evm_sload $BBUTTON;
      v19.i128 = evm_caller;
      v20.i256 = evm_malloc 32.i256;
      mstore v20 v19;
      v21.i256 = evm_malloc 32.i256;
      mstore v21 v1;
      v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;
      br v22 block7 block8;"
    block_ident "block5"
      block_number "5"
    stmt "v18.i128 = evm_sload $BBUTTON;"
      assign_stmt "v18.i128 = evm_sload $BBUTTON"
        value_declaration "v18.i128"
          value_name "v18"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v19.i128 = evm_caller;"
      assign_stmt "v19.i128 = evm_caller"
        value_declaration "v19.i128"
          value_name "v19"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v20.i256 = evm_malloc 32.i256;"
      assign_stmt "v20.i256 = evm_malloc 32.i256"
        value_declaration "v20.i256"
          value_name "v20"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v20 v19;"
      inst_stmt "mstore v20 v19"
        inst "mstore v20 v19"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "v19"
            value "v19"
              value_name "v19"
    stmt "v21.i256 = evm_malloc 32.i256;"
      assign_stmt "v21.i256 = evm_malloc 32.i256"
        value_declaration "v21.i256"
          value_name "v21"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v21 v1;"
      inst_stmt "mstore v21 v1"
        inst "mstore v21 v1"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;"
      assign_stmt "v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256"
        value_declaration "v22.i256"
          value_name "v22"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v18"
            value "v18"
              value_name "v18"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "52.i256"
            value "52.i256"
              imm_number "52.i256"
                decimal "52"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v22 block7 block8;"
      inst_stmt "br v22 block7 block8"
        inst "br v22 block7 block8"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "block7"
            block_ident "block7"
              block_number "7"
          inst_arg "block8"
            block_ident "block8"
              block_number "8"
  block "block8:
      evm_revert 0.i256 0.i256;"
    block_ident "block8"
      block_number "8"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block7:
      v23.i128 = evm_sload $ABUTTON;
      v24.i256 = evm_address;
      v25.i256 = evm_malloc 32.i256;
      mstore v25 v24;
      v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;
      br v26 block9 block10;"
    block_ident "block7"
      block_number "7"
    stmt "v23.i128 = evm_sload $ABUTTON;"
      assign_stmt "v23.i128 = evm_sload $ABUTTON"
        value_declaration "v23.i128"
          value_name "v23"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v24.i256 = evm_address;"
      assign_stmt "v24.i256 = evm_address"
        value_declaration "v24.i256"
          value_name "v24"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v25.i256 = evm_malloc 32.i256;"
      assign_stmt "v25.i256 = evm_malloc 32.i256"
        value_declaration "v25.i256"
          value_name "v25"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v25 v24;"
      inst_stmt "mstore v25 v24"
        inst "mstore v25 v24"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "v24"
            value "v24"
              value_name "v24"
    stmt "v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;"
      assign_stmt "v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256"
        value_declaration "v26.i256"
          value_name "v26"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v23"
            value "v23"
              value_name "v23"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v26 block9 block10;"
      inst_stmt "br v26 block9 block10"
        inst "br v26 block9 block10"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v26"
            value "v26"
              value_name "v26"
          inst_arg "block9"
            block_ident "block9"
              block_number "9"
          inst_arg "block10"
            block_ident "block10"
              block_number "10"
  block "block10:
      evm_revert 0.i256 0.i256;"
    block_ident "block10"
      block_number "10"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block9:
      v27.i128 = evm_sload $BBUTTON;
      v28.i256 = evm_address;
      v29.i256 = evm_malloc 32.i256;
      mstore v29 v28;
      v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;
      br v30 block11 block12;"
    block_ident "block9"
      block_number "9"
    stmt "v27.i128 = evm_sload $BBUTTON;"
      assign_stmt "v27.i128 = evm_sload $BBUTTON"
        value_declaration "v27.i128"
          value_name "v27"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v28.i256 = evm_address;"
      assign_stmt "v28.i256 = evm_address"
        value_declaration "v28.i256"
          value_name "v28"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v29.i256 = evm_malloc 32.i256;"
      assign_stmt "v29.i256 = evm_malloc 32.i256"
        value_declaration "v29.i256"
          value_name "v29"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v29 v28;"
      inst_stmt "mstore v29 v28"
        inst "mstore v29 v28"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v29"
            value "v29"
              value_name "v29"
          inst_arg "v28"
            value "v28"
              value_name "v28"
    stmt "v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;"
      assign_stmt "v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256"
        value_declaration "v30.i256"
          value_name "v30"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v29"
            value "v29"
              value_name "v29"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v30 block11 block12;"
      inst_stmt "br v30 block11 block12"
        inst "br v30 block11 block12"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v30"
            value "v30"
              value_name "v30"
          inst_arg "block11"
            block_ident "block11"
              block_number "11"
          inst_arg "block12"
            block_ident "block12"
              block_number "12"
  block "block12:
      evm_revert 0.i256 0.i256;"
    block_ident "block12"
      block_number "12"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block11:
      v31.i256 = mul 0.i256 0.i256;
      v32.i256 = lt v31 v10;
      br v32 block13 block14;"
    block_ident "block11"
      block_number "11"
    stmt "v31.i256 = mul 0.i256 0.i256;"
      assign_stmt "v31.i256 = mul 0.i256 0.i256"
        value_declaration "v31.i256"
          value_name "v31"
          type_name "i256"
            primitive_type "i256"
        inst "mul 0.i256 0.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v32.i256 = lt v31 v10;"
      assign_stmt "v32.i256 = lt v31 v10"
        value_declaration "v32.i256"
          value_name "v32"
          type_name "i256"
            primitive_type "i256"
        inst "lt v31 v10"
          inst_name "lt"
            inst_identifier "lt"
          inst_arg "v31"
            value "v31"
              value_name "v31"
          inst_arg "v10"
            value "v10"
              value_name "v10"
    stmt "br v32 block13 block14;"
      inst_stmt "br v32 block13 block14"
        inst "br v32 block13 block14"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "block13"
            block_ident "block13"
              block_number "13"
          inst_arg "block14"
            block_ident "block14"
              block_number "14"
  block "block13:
      evm_revert 0.i256 0.i256;
      jump block14;"
    block_ident "block13"
      block_number "13"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block14;"
      inst_stmt "jump block14"
        inst "jump block14"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block14"
            block_ident "block14"
              block_number "14"
  block "block14:
      return 1.i1;"
    block_ident "block14"
      block_number "14"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %bButtonAButton(v0.i256, v1.i256) -> i1 {
  block0:
    v2.i128 = evm_sload $ABUTTON;
    v3.i256 = evm_address;
    v4.i256 = evm_malloc 32.i256;
    mstore v4 v3;
    v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;
    br v5 block1 block2;
  block2:
    evm_revert 0.i256 0.i256;
  block1:
    v6.i128 = evm_sload $BBUTTON;
    v7.i256 = evm_address;
    v8.i256 = evm_malloc 32.i256;
    mstore v8 v7;
    v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;
    br v9 block3 block4;
  block4:
    evm_revert 0.i256 0.i256;
  block3:
    v10.i256 = mul 0.i256 0.i256;
    v11.i128 = evm_sload $BBUTTON;
    v12.i128 = evm_caller;
    v13.i256 = evm_malloc 32.i256;
    mstore v13 v12;
    v14.i256 = evm_address;
    v15.i256 = evm_malloc 32.i256;
    mstore v15 v14;
    v16.i256 = evm_malloc 32.i256;
    mstore v16 v0;
    v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;
    br v17 block5 block6;
  block6:
    evm_revert 0.i256 0.i256;
  block5:
    v18.i128 = evm_sload $ABUTTON;
    v19.i128 = evm_caller;
    v20.i256 = evm_malloc 32.i256;
    mstore v20 v19;
    v21.i256 = evm_malloc 32.i256;
    mstore v21 v1;
    v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;
    br v22 block7 block8;
  block8:
    evm_revert 0.i256 0.i256;
  block7:
    v23.i128 = evm_sload $ABUTTON;
    v24.i256 = evm_address;
    v25.i256 = evm_malloc 32.i256;
    mstore v25 v24;
    v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;
    br v26 block9 block10;
  block10:
    evm_revert 0.i256 0.i256;
  block9:
    v27.i128 = evm_sload $BBUTTON;
    v28.i256 = evm_address;
    v29.i256 = evm_malloc 32.i256;
    mstore v29 v28;
    v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;
    br v30 block11 block12;
  block12:
    evm_revert 0.i256 0.i256;
  block11:
    v31.i256 = mul 0.i256 0.i256;
    v32.i256 = lt v31 v10;
    br v32 block13 block14;
  block13:
    evm_revert 0.i256 0.i256;
    jump block14;
  block14:
    return 1.i1;
}"
  function_signature "func private %bButtonAButton(v0.i256, v1.i256) -> i1"
    linkage "private"
    function_identifier "%bButtonAButton"
      function_name "bButtonAButton"
    function_params "(v0.i256, v1.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
      value_declaration "v1.i256"
        value_name "v1"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v2.i128 = evm_sload $ABUTTON;
      v3.i256 = evm_address;
      v4.i256 = evm_malloc 32.i256;
      mstore v4 v3;
      v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;
      br v5 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i128 = evm_sload $ABUTTON;"
      assign_stmt "v2.i128 = evm_sload $ABUTTON"
        value_declaration "v2.i128"
          value_name "v2"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v3.i256 = evm_address;"
      assign_stmt "v3.i256 = evm_address"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v4.i256 = evm_malloc 32.i256;"
      assign_stmt "v4.i256 = evm_malloc 32.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v4 v3;"
      inst_stmt "mstore v4 v3"
        inst "mstore v4 v3"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256;"
      assign_stmt "v5.i256 = evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v2 v0 v4 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v5 block1 block2;"
      inst_stmt "br v5 block1 block2"
        inst "br v5 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      evm_revert 0.i256 0.i256;"
    block_ident "block2"
      block_number "2"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block1:
      v6.i128 = evm_sload $BBUTTON;
      v7.i256 = evm_address;
      v8.i256 = evm_malloc 32.i256;
      mstore v8 v7;
      v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;
      br v9 block3 block4;"
    block_ident "block1"
      block_number "1"
    stmt "v6.i128 = evm_sload $BBUTTON;"
      assign_stmt "v6.i128 = evm_sload $BBUTTON"
        value_declaration "v6.i128"
          value_name "v6"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v7.i256 = evm_address;"
      assign_stmt "v7.i256 = evm_address"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v8.i256 = evm_malloc 32.i256;"
      assign_stmt "v8.i256 = evm_malloc 32.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v8 v7;"
      inst_stmt "mstore v8 v7"
        inst "mstore v8 v7"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "v7"
            value "v7"
              value_name "v7"
    stmt "v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256;"
      assign_stmt "v9.i256 = evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v6 v0 v8 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v9 block3 block4;"
      inst_stmt "br v9 block3 block4"
        inst "br v9 block3 block4"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "block3"
            block_ident "block3"
              block_number "3"
          inst_arg "block4"
            block_ident "block4"
              block_number "4"
  block "block4:
      evm_revert 0.i256 0.i256;"
    block_ident "block4"
      block_number "4"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block3:
      v10.i256 = mul 0.i256 0.i256;
      v11.i128 = evm_sload $BBUTTON;
      v12.i128 = evm_caller;
      v13.i256 = evm_malloc 32.i256;
      mstore v13 v12;
      v14.i256 = evm_address;
      v15.i256 = evm_malloc 32.i256;
      mstore v15 v14;
      v16.i256 = evm_malloc 32.i256;
      mstore v16 v0;
      v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;
      br v17 block5 block6;"
    block_ident "block3"
      block_number "3"
    stmt "v10.i256 = mul 0.i256 0.i256;"
      assign_stmt "v10.i256 = mul 0.i256 0.i256"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "mul 0.i256 0.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v11.i128 = evm_sload $BBUTTON;"
      assign_stmt "v11.i128 = evm_sload $BBUTTON"
        value_declaration "v11.i128"
          value_name "v11"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v12.i128 = evm_caller;"
      assign_stmt "v12.i128 = evm_caller"
        value_declaration "v12.i128"
          value_name "v12"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v13.i256 = evm_malloc 32.i256;"
      assign_stmt "v13.i256 = evm_malloc 32.i256"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v13 v12;"
      inst_stmt "mstore v13 v12"
        inst "mstore v13 v12"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "v12"
            value "v12"
              value_name "v12"
    stmt "v14.i256 = evm_address;"
      assign_stmt "v14.i256 = evm_address"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v15.i256 = evm_malloc 32.i256;"
      assign_stmt "v15.i256 = evm_malloc 32.i256"
        value_declaration "v15.i256"
          value_name "v15"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v15 v14;"
      inst_stmt "mstore v15 v14"
        inst "mstore v15 v14"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v15"
            value "v15"
              value_name "v15"
          inst_arg "v14"
            value "v14"
              value_name "v14"
    stmt "v16.i256 = evm_malloc 32.i256;"
      assign_stmt "v16.i256 = evm_malloc 32.i256"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v16 v0;"
      inst_stmt "mstore v16 v0"
        inst "mstore v16 v0"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v16"
            value "v16"
              value_name "v16"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256;"
      assign_stmt "v17.i256 = evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256"
        value_declaration "v17.i256"
          value_name "v17"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v11 v0 v13 84.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "84.i256"
            value "84.i256"
              imm_number "84.i256"
                decimal "84"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v17 block5 block6;"
      inst_stmt "br v17 block5 block6"
        inst "br v17 block5 block6"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v17"
            value "v17"
              value_name "v17"
          inst_arg "block5"
            block_ident "block5"
              block_number "5"
          inst_arg "block6"
            block_ident "block6"
              block_number "6"
  block "block6:
      evm_revert 0.i256 0.i256;"
    block_ident "block6"
      block_number "6"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block5:
      v18.i128 = evm_sload $ABUTTON;
      v19.i128 = evm_caller;
      v20.i256 = evm_malloc 32.i256;
      mstore v20 v19;
      v21.i256 = evm_malloc 32.i256;
      mstore v21 v1;
      v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;
      br v22 block7 block8;"
    block_ident "block5"
      block_number "5"
    stmt "v18.i128 = evm_sload $ABUTTON;"
      assign_stmt "v18.i128 = evm_sload $ABUTTON"
        value_declaration "v18.i128"
          value_name "v18"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v19.i128 = evm_caller;"
      assign_stmt "v19.i128 = evm_caller"
        value_declaration "v19.i128"
          value_name "v19"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v20.i256 = evm_malloc 32.i256;"
      assign_stmt "v20.i256 = evm_malloc 32.i256"
        value_declaration "v20.i256"
          value_name "v20"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v20 v19;"
      inst_stmt "mstore v20 v19"
        inst "mstore v20 v19"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "v19"
            value "v19"
              value_name "v19"
    stmt "v21.i256 = evm_malloc 32.i256;"
      assign_stmt "v21.i256 = evm_malloc 32.i256"
        value_declaration "v21.i256"
          value_name "v21"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v21 v1;"
      inst_stmt "mstore v21 v1"
        inst "mstore v21 v1"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256;"
      assign_stmt "v22.i256 = evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256"
        value_declaration "v22.i256"
          value_name "v22"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v18 v0 v20 52.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v18"
            value "v18"
              value_name "v18"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "52.i256"
            value "52.i256"
              imm_number "52.i256"
                decimal "52"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v22 block7 block8;"
      inst_stmt "br v22 block7 block8"
        inst "br v22 block7 block8"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "block7"
            block_ident "block7"
              block_number "7"
          inst_arg "block8"
            block_ident "block8"
              block_number "8"
  block "block8:
      evm_revert 0.i256 0.i256;"
    block_ident "block8"
      block_number "8"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block7:
      v23.i128 = evm_sload $ABUTTON;
      v24.i256 = evm_address;
      v25.i256 = evm_malloc 32.i256;
      mstore v25 v24;
      v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;
      br v26 block9 block10;"
    block_ident "block7"
      block_number "7"
    stmt "v23.i128 = evm_sload $ABUTTON;"
      assign_stmt "v23.i128 = evm_sload $ABUTTON"
        value_declaration "v23.i128"
          value_name "v23"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $ABUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$ABUTTON"
            value "$ABUTTON"
              global_value "$ABUTTON"
                gv_identifier "$ABUTTON"
                  gv_name "ABUTTON"
    stmt "v24.i256 = evm_address;"
      assign_stmt "v24.i256 = evm_address"
        value_declaration "v24.i256"
          value_name "v24"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v25.i256 = evm_malloc 32.i256;"
      assign_stmt "v25.i256 = evm_malloc 32.i256"
        value_declaration "v25.i256"
          value_name "v25"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v25 v24;"
      inst_stmt "mstore v25 v24"
        inst "mstore v25 v24"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "v24"
            value "v24"
              value_name "v24"
    stmt "v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256;"
      assign_stmt "v26.i256 = evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256"
        value_declaration "v26.i256"
          value_name "v26"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v23 v0 v25 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v23"
            value "v23"
              value_name "v23"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v26 block9 block10;"
      inst_stmt "br v26 block9 block10"
        inst "br v26 block9 block10"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v26"
            value "v26"
              value_name "v26"
          inst_arg "block9"
            block_ident "block9"
              block_number "9"
          inst_arg "block10"
            block_ident "block10"
              block_number "10"
  block "block10:
      evm_revert 0.i256 0.i256;"
    block_ident "block10"
      block_number "10"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block9:
      v27.i128 = evm_sload $BBUTTON;
      v28.i256 = evm_address;
      v29.i256 = evm_malloc 32.i256;
      mstore v29 v28;
      v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;
      br v30 block11 block12;"
    block_ident "block9"
      block_number "9"
    stmt "v27.i128 = evm_sload $BBUTTON;"
      assign_stmt "v27.i128 = evm_sload $BBUTTON"
        value_declaration "v27.i128"
          value_name "v27"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $BBUTTON"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$BBUTTON"
            value "$BBUTTON"
              global_value "$BBUTTON"
                gv_identifier "$BBUTTON"
                  gv_name "BBUTTON"
    stmt "v28.i256 = evm_address;"
      assign_stmt "v28.i256 = evm_address"
        value_declaration "v28.i256"
          value_name "v28"
          type_name "i256"
            primitive_type "i256"
        inst "evm_address"
          inst_name "evm_address"
            inst_identifier "evm_address"
    stmt "v29.i256 = evm_malloc 32.i256;"
      assign_stmt "v29.i256 = evm_malloc 32.i256"
        value_declaration "v29.i256"
          value_name "v29"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "mstore v29 v28;"
      inst_stmt "mstore v29 v28"
        inst "mstore v29 v28"
          inst_name "mstore"
            inst_identifier "mstore"
          inst_arg "v29"
            value "v29"
              value_name "v29"
          inst_arg "v28"
            value "v28"
              value_name "v28"
    stmt "v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256;"
      assign_stmt "v30.i256 = evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256"
        value_declaration "v30.i256"
          value_name "v30"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1000000 v27 v0 v29 32.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1000000"
            value "v1000000"
              value_name "v1000000"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v29"
            value "v29"
              value_name "v29"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v30 block11 block12;"
      inst_stmt "br v30 block11 block12"
        inst "br v30 block11 block12"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v30"
            value "v30"
              value_name "v30"
          inst_arg "block11"
            block_ident "block11"
              block_number "11"
          inst_arg "block12"
            block_ident "block12"
              block_number "12"
  block "block12:
      evm_revert 0.i256 0.i256;"
    block_ident "block12"
      block_number "12"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block11:
      v31.i256 = mul 0.i256 0.i256;
      v32.i256 = lt v31 v10;
      br v32 block13 block14;"
    block_ident "block11"
      block_number "11"
    stmt "v31.i256 = mul 0.i256 0.i256;"
      assign_stmt "v31.i256 = mul 0.i256 0.i256"
        value_declaration "v31.i256"
          value_name "v31"
          type_name "i256"
            primitive_type "i256"
        inst "mul 0.i256 0.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v32.i256 = lt v31 v10;"
      assign_stmt "v32.i256 = lt v31 v10"
        value_declaration "v32.i256"
          value_name "v32"
          type_name "i256"
            primitive_type "i256"
        inst "lt v31 v10"
          inst_name "lt"
            inst_identifier "lt"
          inst_arg "v31"
            value "v31"
              value_name "v31"
          inst_arg "v10"
            value "v10"
              value_name "v10"
    stmt "br v32 block13 block14;"
      inst_stmt "br v32 block13 block14"
        inst "br v32 block13 block14"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "block13"
            block_ident "block13"
              block_number "13"
          inst_arg "block14"
            block_ident "block14"
              block_number "14"
  block "block13:
      evm_revert 0.i256 0.i256;
      jump block14;"
    block_ident "block13"
      block_number "13"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block14;"
      inst_stmt "jump block14"
        inst "jump block14"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block14"
            block_ident "block14"
              block_number "14"
  block "block14:
      return 1.i1;"
    block_ident "block14"
      block_number "14"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %returnUint(v0.i256) {
block0:
  v1.i256 = evm_malloc 32.i256;
  evm_mstore v1 v0;
  evm_return v1 32.i256;
}"
  function_signature "func private %returnUint(v0.i256) "
    linkage "private"
    function_identifier "%returnUint"
      function_name "returnUint"
    function_params "(v0.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
  block "block0:
    v1.i256 = evm_malloc 32.i256;
    evm_mstore v1 v0;
    evm_return v1 32.i256;"
    block_ident "block0"
      block_number "0"
    stmt "v1.i256 = evm_malloc 32.i256;"
      assign_stmt "v1.i256 = evm_malloc 32.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v1 v0;"
      inst_stmt "evm_mstore v1 v0"
        inst "evm_mstore v1 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_return v1 32.i256;"
      inst_stmt "evm_return v1 32.i256"
        inst "evm_return v1 32.i256"
          inst_name "evm_return"
            inst_identifier "evm_return"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
