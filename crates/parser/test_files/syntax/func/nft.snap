---
source: crates/parser/tests/syntax.rs
assertion_line: 53
input_file: test_files/syntax/func/nft.sntn
---
function "func public %main() {
  block0:
    v0.i256 = evm_contract_size %constructor;
    v1.i256 = evm_contract_size %entrypoint;
    v2.i256 = add v0 v1;
    v3.i256 = get_function_ptr %entrypoint;
    evm_codecopy 0.i256 v2 v2;
}"
  function_signature "func public %main() "
    linkage "public"
    function_identifier "%main"
      function_name "main"
    function_params "()"
  block "block0:
      v0.i256 = evm_contract_size %constructor;
      v1.i256 = evm_contract_size %entrypoint;
      v2.i256 = add v0 v1;
      v3.i256 = get_function_ptr %entrypoint;
      evm_codecopy 0.i256 v2 v2;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i256 = evm_contract_size %constructor;"
      assign_stmt "v0.i256 = evm_contract_size %constructor"
        value_declaration "v0.i256"
          value_name "v0"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %constructor"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%constructor"
            function_identifier "%constructor"
              function_name "constructor"
    stmt "v1.i256 = evm_contract_size %entrypoint;"
      assign_stmt "v1.i256 = evm_contract_size %entrypoint"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_contract_size %entrypoint"
          inst_name "evm_contract_size"
            inst_identifier "evm_contract_size"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "v2.i256 = add v0 v1;"
      assign_stmt "v2.i256 = add v0 v1"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "add v0 v1"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v3.i256 = get_function_ptr %entrypoint;"
      assign_stmt "v3.i256 = get_function_ptr %entrypoint"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "get_function_ptr %entrypoint"
          inst_name "get_function_ptr"
            inst_identifier "get_function_ptr"
          inst_arg "%entrypoint"
            function_identifier "%entrypoint"
              function_name "entrypoint"
    stmt "evm_codecopy 0.i256 v2 v2;"
      inst_stmt "evm_codecopy 0.i256 v2 v2"
        inst "evm_codecopy 0.i256 v2 v2"
          inst_name "evm_codecopy"
            inst_identifier "evm_codecopy"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v2"
            value "v2"
              value_name "v2"
function "func private %constructor() {
  block0:
    v0.i128 = evm_caller;
    evm_sstore $GEAR v0;
}"
  function_signature "func private %constructor() "
    linkage "private"
    function_identifier "%constructor"
      function_name "constructor"
    function_params "()"
  block "block0:
      v0.i128 = evm_caller;
      evm_sstore $GEAR v0;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i128 = evm_caller;"
      assign_stmt "v0.i128 = evm_caller"
        value_declaration "v0.i128"
          value_name "v0"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "evm_sstore $GEAR v0;"
      inst_stmt "evm_sstore $GEAR v0"
        inst "evm_sstore $GEAR v0"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$GEAR"
            value "$GEAR"
              global_value "$GEAR"
                gv_identifier "$GEAR"
                  gv_name "GEAR"
          inst_arg "v0"
            value "v0"
              value_name "v0"
function "func public %entrypoint() {
  block0:
    v1.i256 = evm_call_data_load 0.i256;
    v2.i256 = shr v0 224.i256;
    br_table v1 block1 (0x1249C58B.i32 block2) (0x5C035DEC.i32 block3) (0x21A43EA3.i32 block4) (0x095EA7B3.i32 block5) (0xA22CB465.i32 block6) (0x23B872DD.i32 block7) (0x081812FC.i32 block8) (0xE985E9C5.i32 block9) (0xC87B56DD.i32 block10) (0x6352211E.i32 block11) (0x70A08231.i32 block12) (0x06FDDE03.i32 block13) (0x95D89B41.i32 block14);
  block2:
    v3.i1 = call %mint;
    call %returnUint v3;
  block3:
    v4.i256 = evm_call_data_load 1.i8;
    v5.i256 = evm_call_data_load 2.i8;
    v6.i1 = call %wrappedGiftWhiteHeavyCheckMark v4 v5;
    call %returnUint v6;
  block4:
    v7.i256 = evm_call_data_load 1.i8;
    v8.i256 = evm_call_data_load 2.i8;
    v9.i1 = call %wrappedGiftMoneyWithWings v7 v8;
    call %returnUint v9;
  block5:
    v10.i256 = evm_call_data_load 1.i8;
    v11.i256 = evm_call_data_load 2.i8;
    v12.i1 = call %approve v10 v11;
    call %returnUint v12;
  block6:
    v13.i256 = evm_call_data_load 1.i8;
    v14.i256 = evm_call_data_load 2.i8;
    v15.i1 = call %setApprovalForAll v13 v14;
    call %returnUint v15;
  block7:
    v16.i256 = evm_call_data_load 1.i8;
    v17.i256 = evm_call_data_load 2.i8;
    v18.i256 = evm_call_data_load 3.i8;
    v19.i1 = call %transferFrom v16 v17 v18;
    call %returnUint v19;
  block8:
    v20.i256 = evm_call_data_load 1.i8;
    v21.i128 = call %getApproved v20;
    call %returnAddress v21;
  block9:
    v22.i256 = evm_call_data_load 1.i8;
    v23.i256 = evm_call_data_load 2.i8;
    v24.i1 = call %isApprovedForAll v22 v23;
    call %returnUint v24;
  block10:
    v25.i256 = evm_call_data_load 1.i8;
    v26.i256 = call %tokenURI v25;
    call %returnUint v26;
  block11:
    v27.i256 = evm_call_data_load 1.i8;
    v28.i128 = call %ownerOf v27;
    call %returnAddress v28;
  block12:
    v29.i256 = evm_call_data_load 1.i8;
    v30.i256 = call %balanceOf v29;
    call %returnUint v30;
  block13:
    v31.i256 = call %name;
    call %returnUint v31;
  block14:
    v32.i256 = call %symbol;
    call %returnUint v32;
  block1:
    evm_revert 0.i256 0.i256;
}"
  function_signature "func public %entrypoint() "
    linkage "public"
    function_identifier "%entrypoint"
      function_name "entrypoint"
    function_params "()"
  block "block0:
      v1.i256 = evm_call_data_load 0.i256;
      v2.i256 = shr v0 224.i256;
      br_table v1 block1 (0x1249C58B.i32 block2) (0x5C035DEC.i32 block3) (0x21A43EA3.i32 block4) (0x095EA7B3.i32 block5) (0xA22CB465.i32 block6) (0x23B872DD.i32 block7) (0x081812FC.i32 block8) (0xE985E9C5.i32 block9) (0xC87B56DD.i32 block10) (0x6352211E.i32 block11) (0x70A08231.i32 block12) (0x06FDDE03.i32 block13) (0x95D89B41.i32 block14);"
    block_ident "block0"
      block_number "0"
    stmt "v1.i256 = evm_call_data_load 0.i256;"
      assign_stmt "v1.i256 = evm_call_data_load 0.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 0.i256"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v2.i256 = shr v0 224.i256;"
      assign_stmt "v2.i256 = shr v0 224.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "shr v0 224.i256"
          inst_name "shr"
            inst_identifier "shr"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "224.i256"
            value "224.i256"
              imm_number "224.i256"
                decimal "224"
                primitive_type "i256"
    stmt "br_table v1 block1 (0x1249C58B.i32 block2) (0x5C035DEC.i32 block3) (0x21A43EA3.i32 block4) (0x095EA7B3.i32 block5) (0xA22CB465.i32 block6) (0x23B872DD.i32 block7) (0x081812FC.i32 block8) (0xE985E9C5.i32 block9) (0xC87B56DD.i32 block10) (0x6352211E.i32 block11) (0x70A08231.i32 block12) (0x06FDDE03.i32 block13) (0x95D89B41.i32 block14);"
      inst_stmt "br_table v1 block1 (0x1249C58B.i32 block2) (0x5C035DEC.i32 block3) (0x21A43EA3.i32 block4) (0x095EA7B3.i32 block5) (0xA22CB465.i32 block6) (0x23B872DD.i32 block7) (0x081812FC.i32 block8) (0xE985E9C5.i32 block9) (0xC87B56DD.i32 block10) (0x6352211E.i32 block11) (0x70A08231.i32 block12) (0x06FDDE03.i32 block13) (0x95D89B41.i32 block14)"
        inst "br_table v1 block1 (0x1249C58B.i32 block2) (0x5C035DEC.i32 block3) (0x21A43EA3.i32 block4) (0x095EA7B3.i32 block5) (0xA22CB465.i32 block6) (0x23B872DD.i32 block7) (0x081812FC.i32 block8) (0xE985E9C5.i32 block9) (0xC87B56DD.i32 block10) (0x6352211E.i32 block11) (0x70A08231.i32 block12) (0x06FDDE03.i32 block13) (0x95D89B41.i32 block14)"
          inst_name "br_table"
            inst_identifier "br_table"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "(0x1249C58B.i32 block2)"
            value_block_map "(0x1249C58B.i32 block2)"
              value "0x1249C58B.i32"
                imm_number "0x1249C58B.i32"
                  hex "0x1249C58B"
                  primitive_type "i32"
              block_ident "block2"
                block_number "2"
          inst_arg "(0x5C035DEC.i32 block3)"
            value_block_map "(0x5C035DEC.i32 block3)"
              value "0x5C035DEC.i32"
                imm_number "0x5C035DEC.i32"
                  hex "0x5C035DEC"
                  primitive_type "i32"
              block_ident "block3"
                block_number "3"
          inst_arg "(0x21A43EA3.i32 block4)"
            value_block_map "(0x21A43EA3.i32 block4)"
              value "0x21A43EA3.i32"
                imm_number "0x21A43EA3.i32"
                  hex "0x21A43EA3"
                  primitive_type "i32"
              block_ident "block4"
                block_number "4"
          inst_arg "(0x095EA7B3.i32 block5)"
            value_block_map "(0x095EA7B3.i32 block5)"
              value "0x095EA7B3.i32"
                imm_number "0x095EA7B3.i32"
                  hex "0x095EA7B3"
                  primitive_type "i32"
              block_ident "block5"
                block_number "5"
          inst_arg "(0xA22CB465.i32 block6)"
            value_block_map "(0xA22CB465.i32 block6)"
              value "0xA22CB465.i32"
                imm_number "0xA22CB465.i32"
                  hex "0xA22CB465"
                  primitive_type "i32"
              block_ident "block6"
                block_number "6"
          inst_arg "(0x23B872DD.i32 block7)"
            value_block_map "(0x23B872DD.i32 block7)"
              value "0x23B872DD.i32"
                imm_number "0x23B872DD.i32"
                  hex "0x23B872DD"
                  primitive_type "i32"
              block_ident "block7"
                block_number "7"
          inst_arg "(0x081812FC.i32 block8)"
            value_block_map "(0x081812FC.i32 block8)"
              value "0x081812FC.i32"
                imm_number "0x081812FC.i32"
                  hex "0x081812FC"
                  primitive_type "i32"
              block_ident "block8"
                block_number "8"
          inst_arg "(0xE985E9C5.i32 block9)"
            value_block_map "(0xE985E9C5.i32 block9)"
              value "0xE985E9C5.i32"
                imm_number "0xE985E9C5.i32"
                  hex "0xE985E9C5"
                  primitive_type "i32"
              block_ident "block9"
                block_number "9"
          inst_arg "(0xC87B56DD.i32 block10)"
            value_block_map "(0xC87B56DD.i32 block10)"
              value "0xC87B56DD.i32"
                imm_number "0xC87B56DD.i32"
                  hex "0xC87B56DD"
                  primitive_type "i32"
              block_ident "block10"
                block_number "10"
          inst_arg "(0x6352211E.i32 block11)"
            value_block_map "(0x6352211E.i32 block11)"
              value "0x6352211E.i32"
                imm_number "0x6352211E.i32"
                  hex "0x6352211E"
                  primitive_type "i32"
              block_ident "block11"
                block_number "11"
          inst_arg "(0x70A08231.i32 block12)"
            value_block_map "(0x70A08231.i32 block12)"
              value "0x70A08231.i32"
                imm_number "0x70A08231.i32"
                  hex "0x70A08231"
                  primitive_type "i32"
              block_ident "block12"
                block_number "12"
          inst_arg "(0x06FDDE03.i32 block13)"
            value_block_map "(0x06FDDE03.i32 block13)"
              value "0x06FDDE03.i32"
                imm_number "0x06FDDE03.i32"
                  hex "0x06FDDE03"
                  primitive_type "i32"
              block_ident "block13"
                block_number "13"
          inst_arg "(0x95D89B41.i32 block14)"
            value_block_map "(0x95D89B41.i32 block14)"
              value "0x95D89B41.i32"
                imm_number "0x95D89B41.i32"
                  hex "0x95D89B41"
                  primitive_type "i32"
              block_ident "block14"
                block_number "14"
  block "block2:
      v3.i1 = call %mint;
      call %returnUint v3;"
    block_ident "block2"
      block_number "2"
    stmt "v3.i1 = call %mint;"
      assign_stmt "v3.i1 = call %mint"
        value_declaration "v3.i1"
          value_name "v3"
          type_name "i1"
            primitive_type "i1"
        inst "call %mint"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%mint"
            function_identifier "%mint"
              function_name "mint"
    stmt "call %returnUint v3;"
      inst_stmt "call %returnUint v3"
        inst "call %returnUint v3"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v3"
            value "v3"
              value_name "v3"
  block "block3:
      v4.i256 = evm_call_data_load 1.i8;
      v5.i256 = evm_call_data_load 2.i8;
      v6.i1 = call %wrappedGiftWhiteHeavyCheckMark v4 v5;
      call %returnUint v6;"
    block_ident "block3"
      block_number "3"
    stmt "v4.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v4.i256 = evm_call_data_load 1.i8"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v5.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v5.i256 = evm_call_data_load 2.i8"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v6.i1 = call %wrappedGiftWhiteHeavyCheckMark v4 v5;"
      assign_stmt "v6.i1 = call %wrappedGiftWhiteHeavyCheckMark v4 v5"
        value_declaration "v6.i1"
          value_name "v6"
          type_name "i1"
            primitive_type "i1"
        inst "call %wrappedGiftWhiteHeavyCheckMark v4 v5"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%wrappedGiftWhiteHeavyCheckMark"
            function_identifier "%wrappedGiftWhiteHeavyCheckMark"
              function_name "wrappedGiftWhiteHeavyCheckMark"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v5"
            value "v5"
              value_name "v5"
    stmt "call %returnUint v6;"
      inst_stmt "call %returnUint v6"
        inst "call %returnUint v6"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v6"
            value "v6"
              value_name "v6"
  block "block4:
      v7.i256 = evm_call_data_load 1.i8;
      v8.i256 = evm_call_data_load 2.i8;
      v9.i1 = call %wrappedGiftMoneyWithWings v7 v8;
      call %returnUint v9;"
    block_ident "block4"
      block_number "4"
    stmt "v7.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v7.i256 = evm_call_data_load 1.i8"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v8.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v8.i256 = evm_call_data_load 2.i8"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v9.i1 = call %wrappedGiftMoneyWithWings v7 v8;"
      assign_stmt "v9.i1 = call %wrappedGiftMoneyWithWings v7 v8"
        value_declaration "v9.i1"
          value_name "v9"
          type_name "i1"
            primitive_type "i1"
        inst "call %wrappedGiftMoneyWithWings v7 v8"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%wrappedGiftMoneyWithWings"
            function_identifier "%wrappedGiftMoneyWithWings"
              function_name "wrappedGiftMoneyWithWings"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "v8"
            value "v8"
              value_name "v8"
    stmt "call %returnUint v9;"
      inst_stmt "call %returnUint v9"
        inst "call %returnUint v9"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v9"
            value "v9"
              value_name "v9"
  block "block5:
      v10.i256 = evm_call_data_load 1.i8;
      v11.i256 = evm_call_data_load 2.i8;
      v12.i1 = call %approve v10 v11;
      call %returnUint v12;"
    block_ident "block5"
      block_number "5"
    stmt "v10.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v10.i256 = evm_call_data_load 1.i8"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v11.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v11.i256 = evm_call_data_load 2.i8"
        value_declaration "v11.i256"
          value_name "v11"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v12.i1 = call %approve v10 v11;"
      assign_stmt "v12.i1 = call %approve v10 v11"
        value_declaration "v12.i1"
          value_name "v12"
          type_name "i1"
            primitive_type "i1"
        inst "call %approve v10 v11"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%approve"
            function_identifier "%approve"
              function_name "approve"
          inst_arg "v10"
            value "v10"
              value_name "v10"
          inst_arg "v11"
            value "v11"
              value_name "v11"
    stmt "call %returnUint v12;"
      inst_stmt "call %returnUint v12"
        inst "call %returnUint v12"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v12"
            value "v12"
              value_name "v12"
  block "block6:
      v13.i256 = evm_call_data_load 1.i8;
      v14.i256 = evm_call_data_load 2.i8;
      v15.i1 = call %setApprovalForAll v13 v14;
      call %returnUint v15;"
    block_ident "block6"
      block_number "6"
    stmt "v13.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v13.i256 = evm_call_data_load 1.i8"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v14.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v14.i256 = evm_call_data_load 2.i8"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v15.i1 = call %setApprovalForAll v13 v14;"
      assign_stmt "v15.i1 = call %setApprovalForAll v13 v14"
        value_declaration "v15.i1"
          value_name "v15"
          type_name "i1"
            primitive_type "i1"
        inst "call %setApprovalForAll v13 v14"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%setApprovalForAll"
            function_identifier "%setApprovalForAll"
              function_name "setApprovalForAll"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "v14"
            value "v14"
              value_name "v14"
    stmt "call %returnUint v15;"
      inst_stmt "call %returnUint v15"
        inst "call %returnUint v15"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v15"
            value "v15"
              value_name "v15"
  block "block7:
      v16.i256 = evm_call_data_load 1.i8;
      v17.i256 = evm_call_data_load 2.i8;
      v18.i256 = evm_call_data_load 3.i8;
      v19.i1 = call %transferFrom v16 v17 v18;
      call %returnUint v19;"
    block_ident "block7"
      block_number "7"
    stmt "v16.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v16.i256 = evm_call_data_load 1.i8"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v17.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v17.i256 = evm_call_data_load 2.i8"
        value_declaration "v17.i256"
          value_name "v17"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v18.i256 = evm_call_data_load 3.i8;"
      assign_stmt "v18.i256 = evm_call_data_load 3.i8"
        value_declaration "v18.i256"
          value_name "v18"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 3.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "3.i8"
            value "3.i8"
              imm_number "3.i8"
                decimal "3"
                primitive_type "i8"
    stmt "v19.i1 = call %transferFrom v16 v17 v18;"
      assign_stmt "v19.i1 = call %transferFrom v16 v17 v18"
        value_declaration "v19.i1"
          value_name "v19"
          type_name "i1"
            primitive_type "i1"
        inst "call %transferFrom v16 v17 v18"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%transferFrom"
            function_identifier "%transferFrom"
              function_name "transferFrom"
          inst_arg "v16"
            value "v16"
              value_name "v16"
          inst_arg "v17"
            value "v17"
              value_name "v17"
          inst_arg "v18"
            value "v18"
              value_name "v18"
    stmt "call %returnUint v19;"
      inst_stmt "call %returnUint v19"
        inst "call %returnUint v19"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v19"
            value "v19"
              value_name "v19"
  block "block8:
      v20.i256 = evm_call_data_load 1.i8;
      v21.i128 = call %getApproved v20;
      call %returnAddress v21;"
    block_ident "block8"
      block_number "8"
    stmt "v20.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v20.i256 = evm_call_data_load 1.i8"
        value_declaration "v20.i256"
          value_name "v20"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v21.i128 = call %getApproved v20;"
      assign_stmt "v21.i128 = call %getApproved v20"
        value_declaration "v21.i128"
          value_name "v21"
          type_name "i128"
            primitive_type "i128"
        inst "call %getApproved v20"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%getApproved"
            function_identifier "%getApproved"
              function_name "getApproved"
          inst_arg "v20"
            value "v20"
              value_name "v20"
    stmt "call %returnAddress v21;"
      inst_stmt "call %returnAddress v21"
        inst "call %returnAddress v21"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnAddress"
            function_identifier "%returnAddress"
              function_name "returnAddress"
          inst_arg "v21"
            value "v21"
              value_name "v21"
  block "block9:
      v22.i256 = evm_call_data_load 1.i8;
      v23.i256 = evm_call_data_load 2.i8;
      v24.i1 = call %isApprovedForAll v22 v23;
      call %returnUint v24;"
    block_ident "block9"
      block_number "9"
    stmt "v22.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v22.i256 = evm_call_data_load 1.i8"
        value_declaration "v22.i256"
          value_name "v22"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v23.i256 = evm_call_data_load 2.i8;"
      assign_stmt "v23.i256 = evm_call_data_load 2.i8"
        value_declaration "v23.i256"
          value_name "v23"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 2.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "2.i8"
            value "2.i8"
              imm_number "2.i8"
                decimal "2"
                primitive_type "i8"
    stmt "v24.i1 = call %isApprovedForAll v22 v23;"
      assign_stmt "v24.i1 = call %isApprovedForAll v22 v23"
        value_declaration "v24.i1"
          value_name "v24"
          type_name "i1"
            primitive_type "i1"
        inst "call %isApprovedForAll v22 v23"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%isApprovedForAll"
            function_identifier "%isApprovedForAll"
              function_name "isApprovedForAll"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "v23"
            value "v23"
              value_name "v23"
    stmt "call %returnUint v24;"
      inst_stmt "call %returnUint v24"
        inst "call %returnUint v24"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v24"
            value "v24"
              value_name "v24"
  block "block10:
      v25.i256 = evm_call_data_load 1.i8;
      v26.i256 = call %tokenURI v25;
      call %returnUint v26;"
    block_ident "block10"
      block_number "10"
    stmt "v25.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v25.i256 = evm_call_data_load 1.i8"
        value_declaration "v25.i256"
          value_name "v25"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v26.i256 = call %tokenURI v25;"
      assign_stmt "v26.i256 = call %tokenURI v25"
        value_declaration "v26.i256"
          value_name "v26"
          type_name "i256"
            primitive_type "i256"
        inst "call %tokenURI v25"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%tokenURI"
            function_identifier "%tokenURI"
              function_name "tokenURI"
          inst_arg "v25"
            value "v25"
              value_name "v25"
    stmt "call %returnUint v26;"
      inst_stmt "call %returnUint v26"
        inst "call %returnUint v26"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v26"
            value "v26"
              value_name "v26"
  block "block11:
      v27.i256 = evm_call_data_load 1.i8;
      v28.i128 = call %ownerOf v27;
      call %returnAddress v28;"
    block_ident "block11"
      block_number "11"
    stmt "v27.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v27.i256 = evm_call_data_load 1.i8"
        value_declaration "v27.i256"
          value_name "v27"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v28.i128 = call %ownerOf v27;"
      assign_stmt "v28.i128 = call %ownerOf v27"
        value_declaration "v28.i128"
          value_name "v28"
          type_name "i128"
            primitive_type "i128"
        inst "call %ownerOf v27"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%ownerOf"
            function_identifier "%ownerOf"
              function_name "ownerOf"
          inst_arg "v27"
            value "v27"
              value_name "v27"
    stmt "call %returnAddress v28;"
      inst_stmt "call %returnAddress v28"
        inst "call %returnAddress v28"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnAddress"
            function_identifier "%returnAddress"
              function_name "returnAddress"
          inst_arg "v28"
            value "v28"
              value_name "v28"
  block "block12:
      v29.i256 = evm_call_data_load 1.i8;
      v30.i256 = call %balanceOf v29;
      call %returnUint v30;"
    block_ident "block12"
      block_number "12"
    stmt "v29.i256 = evm_call_data_load 1.i8;"
      assign_stmt "v29.i256 = evm_call_data_load 1.i8"
        value_declaration "v29.i256"
          value_name "v29"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call_data_load 1.i8"
          inst_name "evm_call_data_load"
            inst_identifier "evm_call_data_load"
          inst_arg "1.i8"
            value "1.i8"
              imm_number "1.i8"
                decimal "1"
                primitive_type "i8"
    stmt "v30.i256 = call %balanceOf v29;"
      assign_stmt "v30.i256 = call %balanceOf v29"
        value_declaration "v30.i256"
          value_name "v30"
          type_name "i256"
            primitive_type "i256"
        inst "call %balanceOf v29"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%balanceOf"
            function_identifier "%balanceOf"
              function_name "balanceOf"
          inst_arg "v29"
            value "v29"
              value_name "v29"
    stmt "call %returnUint v30;"
      inst_stmt "call %returnUint v30"
        inst "call %returnUint v30"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v30"
            value "v30"
              value_name "v30"
  block "block13:
      v31.i256 = call %name;
      call %returnUint v31;"
    block_ident "block13"
      block_number "13"
    stmt "v31.i256 = call %name;"
      assign_stmt "v31.i256 = call %name"
        value_declaration "v31.i256"
          value_name "v31"
          type_name "i256"
            primitive_type "i256"
        inst "call %name"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%name"
            function_identifier "%name"
              function_name "name"
    stmt "call %returnUint v31;"
      inst_stmt "call %returnUint v31"
        inst "call %returnUint v31"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v31"
            value "v31"
              value_name "v31"
  block "block14:
      v32.i256 = call %symbol;
      call %returnUint v32;"
    block_ident "block14"
      block_number "14"
    stmt "v32.i256 = call %symbol;"
      assign_stmt "v32.i256 = call %symbol"
        value_declaration "v32.i256"
          value_name "v32"
          type_name "i256"
            primitive_type "i256"
        inst "call %symbol"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%symbol"
            function_identifier "%symbol"
              function_name "symbol"
    stmt "call %returnUint v32;"
      inst_stmt "call %returnUint v32"
        inst "call %returnUint v32"
          inst_name "call"
            inst_identifier "call"
          inst_arg "%returnUint"
            function_identifier "%returnUint"
              function_name "returnUint"
          inst_arg "v32"
            value "v32"
              value_name "v32"
  block "block1:
      evm_revert 0.i256 0.i256;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
function "func private %mint() -> i1 {
  block0:
    v0.i128 = evm_caller;
    v2.i256 = evm_malloc 64.i256;
    v3.i256 = add v2 32.i256;
    evm_mstore v2 v0;
    evm_mstore v3 $WRAPPEDGIFT;
    v1.i256 = evm_keccak256 v2 64.i256;
    v4.i256 = gt v1 0.i256;
    br v4 block1 block2;
  block1:
    v5.i128 = evm_caller;
    v7.i256 = evm_malloc 64.i256;
    v8.i256 = add v7 32.i256;
    evm_mstore v7 v5;
    evm_mstore v8 $WRAPPEDGIFT;
    v6.i256 = evm_keccak256 v7 64.i256;
    v9.i256 = sub v6 1.i256;
    v10.i128 = evm_caller;
    v12.i256 = evm_malloc 64.i256;
    v13.i256 = add v12 32.i256;
    evm_mstore v12 v10;
    evm_mstore v13 $WRAPPEDGIFT;
    v11.i256 = evm_keccak256 v12 64.i256;
    evm_sstore v11 v9;
    jump block2;
  block2:
    v14.i256 = evm_callvalue;
    v15.i256 = eq v14 1000000000000000.i256;
    v16.i256 = add v4 v15;
    v17.i256 = eq v16 0.i256;
    br v17 block3 block4;
  block3:
    evm_revert 0.i256 0.i256;
    jump block4;
  block4:
    v18.i128 = evm_caller;
    v19.i256 = evm_sload $GLOBEWITHMERIDIANS;
    v21.i256 = evm_malloc 64.i256;
    v22.i256 = add v21 32.i256;
    evm_mstore v21 v19;
    evm_mstore v22 $CROWN;
    v20.i256 = evm_keccak256 v21 64.i256;
    evm_sstore v20 v18;
    v23.i256 = evm_sload $GLOBEWITHMERIDIANS;
    v24.i256 = add v23 1.i256;
    evm_sstore $GLOBEWITHMERIDIANS v24;
    v25.i128 = evm_caller;
    v27.i256 = evm_malloc 64.i256;
    v28.i256 = add v27 32.i256;
    evm_mstore v27 v25;
    evm_mstore v28 $ABACUS;
    v26.i256 = evm_keccak256 v27 64.i256;
    v29.i256 = add v26 1.i256;
    v30.i128 = evm_caller;
    v32.i256 = evm_malloc 64.i256;
    v33.i256 = add v32 32.i256;
    evm_mstore v32 v30;
    evm_mstore v33 $ABACUS;
    v31.i256 = evm_keccak256 v32 64.i256;
    evm_sstore v31 v29;
    v34.i256 = evm_malloc 32.i256;
    evm_mstore v34 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
    v35.i128 = evm_caller;
    v36.i256 = evm_sload $GLOBEWITHMERIDIANS;
    v37.i256 = evm_sload $GLOBEWITHMERIDIANS;
    evm_log5 v34 32.i256 v0 v35 v36 v37;
    return 1.i1;
}"
  function_signature "func private %mint() -> i1"
    linkage "private"
    function_identifier "%mint"
      function_name "mint"
    function_params "()"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v0.i128 = evm_caller;
      v2.i256 = evm_malloc 64.i256;
      v3.i256 = add v2 32.i256;
      evm_mstore v2 v0;
      evm_mstore v3 $WRAPPEDGIFT;
      v1.i256 = evm_keccak256 v2 64.i256;
      v4.i256 = gt v1 0.i256;
      br v4 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v0.i128 = evm_caller;"
      assign_stmt "v0.i128 = evm_caller"
        value_declaration "v0.i128"
          value_name "v0"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v2.i256 = evm_malloc 64.i256;"
      assign_stmt "v2.i256 = evm_malloc 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v3.i256 = add v2 32.i256;"
      assign_stmt "v3.i256 = add v2 32.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "add v2 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v2 v0;"
      inst_stmt "evm_mstore v2 v0"
        inst "evm_mstore v2 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v3 $WRAPPEDGIFT;"
      inst_stmt "evm_mstore v3 $WRAPPEDGIFT"
        inst "evm_mstore v3 $WRAPPEDGIFT"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "$WRAPPEDGIFT"
            value "$WRAPPEDGIFT"
              global_value "$WRAPPEDGIFT"
                gv_identifier "$WRAPPEDGIFT"
                  gv_name "WRAPPEDGIFT"
    stmt "v1.i256 = evm_keccak256 v2 64.i256;"
      assign_stmt "v1.i256 = evm_keccak256 v2 64.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v2 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v4.i256 = gt v1 0.i256;"
      assign_stmt "v4.i256 = gt v1 0.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "gt v1 0.i256"
          inst_name "gt"
            inst_identifier "gt"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v4 block1 block2;"
      inst_stmt "br v4 block1 block2"
        inst "br v4 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      v5.i128 = evm_caller;
      v7.i256 = evm_malloc 64.i256;
      v8.i256 = add v7 32.i256;
      evm_mstore v7 v5;
      evm_mstore v8 $WRAPPEDGIFT;
      v6.i256 = evm_keccak256 v7 64.i256;
      v9.i256 = sub v6 1.i256;
      v10.i128 = evm_caller;
      v12.i256 = evm_malloc 64.i256;
      v13.i256 = add v12 32.i256;
      evm_mstore v12 v10;
      evm_mstore v13 $WRAPPEDGIFT;
      v11.i256 = evm_keccak256 v12 64.i256;
      evm_sstore v11 v9;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "v5.i128 = evm_caller;"
      assign_stmt "v5.i128 = evm_caller"
        value_declaration "v5.i128"
          value_name "v5"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v7.i256 = evm_malloc 64.i256;"
      assign_stmt "v7.i256 = evm_malloc 64.i256"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v8.i256 = add v7 32.i256;"
      assign_stmt "v8.i256 = add v7 32.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "add v7 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v7 v5;"
      inst_stmt "evm_mstore v7 v5"
        inst "evm_mstore v7 v5"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "v5"
            value "v5"
              value_name "v5"
    stmt "evm_mstore v8 $WRAPPEDGIFT;"
      inst_stmt "evm_mstore v8 $WRAPPEDGIFT"
        inst "evm_mstore v8 $WRAPPEDGIFT"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "$WRAPPEDGIFT"
            value "$WRAPPEDGIFT"
              global_value "$WRAPPEDGIFT"
                gv_identifier "$WRAPPEDGIFT"
                  gv_name "WRAPPEDGIFT"
    stmt "v6.i256 = evm_keccak256 v7 64.i256;"
      assign_stmt "v6.i256 = evm_keccak256 v7 64.i256"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v7 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v9.i256 = sub v6 1.i256;"
      assign_stmt "v9.i256 = sub v6 1.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "sub v6 1.i256"
          inst_name "sub"
            inst_identifier "sub"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "v10.i128 = evm_caller;"
      assign_stmt "v10.i128 = evm_caller"
        value_declaration "v10.i128"
          value_name "v10"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v12.i256 = evm_malloc 64.i256;"
      assign_stmt "v12.i256 = evm_malloc 64.i256"
        value_declaration "v12.i256"
          value_name "v12"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v13.i256 = add v12 32.i256;"
      assign_stmt "v13.i256 = add v12 32.i256"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "add v12 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v12"
            value "v12"
              value_name "v12"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v12 v10;"
      inst_stmt "evm_mstore v12 v10"
        inst "evm_mstore v12 v10"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v12"
            value "v12"
              value_name "v12"
          inst_arg "v10"
            value "v10"
              value_name "v10"
    stmt "evm_mstore v13 $WRAPPEDGIFT;"
      inst_stmt "evm_mstore v13 $WRAPPEDGIFT"
        inst "evm_mstore v13 $WRAPPEDGIFT"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "$WRAPPEDGIFT"
            value "$WRAPPEDGIFT"
              global_value "$WRAPPEDGIFT"
                gv_identifier "$WRAPPEDGIFT"
                  gv_name "WRAPPEDGIFT"
    stmt "v11.i256 = evm_keccak256 v12 64.i256;"
      assign_stmt "v11.i256 = evm_keccak256 v12 64.i256"
        value_declaration "v11.i256"
          value_name "v11"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v12 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v12"
            value "v12"
              value_name "v12"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v11 v9;"
      inst_stmt "evm_sstore v11 v9"
        inst "evm_sstore v11 v9"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "v9"
            value "v9"
              value_name "v9"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v14.i256 = evm_callvalue;
      v15.i256 = eq v14 1000000000000000.i256;
      v16.i256 = add v4 v15;
      v17.i256 = eq v16 0.i256;
      br v17 block3 block4;"
    block_ident "block2"
      block_number "2"
    stmt "v14.i256 = evm_callvalue;"
      assign_stmt "v14.i256 = evm_callvalue"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "evm_callvalue"
          inst_name "evm_callvalue"
            inst_identifier "evm_callvalue"
    stmt "v15.i256 = eq v14 1000000000000000.i256;"
      assign_stmt "v15.i256 = eq v14 1000000000000000.i256"
        value_declaration "v15.i256"
          value_name "v15"
          type_name "i256"
            primitive_type "i256"
        inst "eq v14 1000000000000000.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v14"
            value "v14"
              value_name "v14"
          inst_arg "1000000000000000.i256"
            value "1000000000000000.i256"
              imm_number "1000000000000000.i256"
                decimal "1000000000000000"
                primitive_type "i256"
    stmt "v16.i256 = add v4 v15;"
      assign_stmt "v16.i256 = add v4 v15"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "add v4 v15"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v15"
            value "v15"
              value_name "v15"
    stmt "v17.i256 = eq v16 0.i256;"
      assign_stmt "v17.i256 = eq v16 0.i256"
        value_declaration "v17.i256"
          value_name "v17"
          type_name "i256"
            primitive_type "i256"
        inst "eq v16 0.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v16"
            value "v16"
              value_name "v16"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v17 block3 block4;"
      inst_stmt "br v17 block3 block4"
        inst "br v17 block3 block4"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v17"
            value "v17"
              value_name "v17"
          inst_arg "block3"
            block_ident "block3"
              block_number "3"
          inst_arg "block4"
            block_ident "block4"
              block_number "4"
  block "block3:
      evm_revert 0.i256 0.i256;
      jump block4;"
    block_ident "block3"
      block_number "3"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block4;"
      inst_stmt "jump block4"
        inst "jump block4"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block4"
            block_ident "block4"
              block_number "4"
  block "block4:
      v18.i128 = evm_caller;
      v19.i256 = evm_sload $GLOBEWITHMERIDIANS;
      v21.i256 = evm_malloc 64.i256;
      v22.i256 = add v21 32.i256;
      evm_mstore v21 v19;
      evm_mstore v22 $CROWN;
      v20.i256 = evm_keccak256 v21 64.i256;
      evm_sstore v20 v18;
      v23.i256 = evm_sload $GLOBEWITHMERIDIANS;
      v24.i256 = add v23 1.i256;
      evm_sstore $GLOBEWITHMERIDIANS v24;
      v25.i128 = evm_caller;
      v27.i256 = evm_malloc 64.i256;
      v28.i256 = add v27 32.i256;
      evm_mstore v27 v25;
      evm_mstore v28 $ABACUS;
      v26.i256 = evm_keccak256 v27 64.i256;
      v29.i256 = add v26 1.i256;
      v30.i128 = evm_caller;
      v32.i256 = evm_malloc 64.i256;
      v33.i256 = add v32 32.i256;
      evm_mstore v32 v30;
      evm_mstore v33 $ABACUS;
      v31.i256 = evm_keccak256 v32 64.i256;
      evm_sstore v31 v29;
      v34.i256 = evm_malloc 32.i256;
      evm_mstore v34 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
      v35.i128 = evm_caller;
      v36.i256 = evm_sload $GLOBEWITHMERIDIANS;
      v37.i256 = evm_sload $GLOBEWITHMERIDIANS;
      evm_log5 v34 32.i256 v0 v35 v36 v37;
      return 1.i1;"
    block_ident "block4"
      block_number "4"
    stmt "v18.i128 = evm_caller;"
      assign_stmt "v18.i128 = evm_caller"
        value_declaration "v18.i128"
          value_name "v18"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v19.i256 = evm_sload $GLOBEWITHMERIDIANS;"
      assign_stmt "v19.i256 = evm_sload $GLOBEWITHMERIDIANS"
        value_declaration "v19.i256"
          value_name "v19"
          type_name "i256"
            primitive_type "i256"
        inst "evm_sload $GLOBEWITHMERIDIANS"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GLOBEWITHMERIDIANS"
            value "$GLOBEWITHMERIDIANS"
              global_value "$GLOBEWITHMERIDIANS"
                gv_identifier "$GLOBEWITHMERIDIANS"
                  gv_name "GLOBEWITHMERIDIANS"
    stmt "v21.i256 = evm_malloc 64.i256;"
      assign_stmt "v21.i256 = evm_malloc 64.i256"
        value_declaration "v21.i256"
          value_name "v21"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v22.i256 = add v21 32.i256;"
      assign_stmt "v22.i256 = add v21 32.i256"
        value_declaration "v22.i256"
          value_name "v22"
          type_name "i256"
            primitive_type "i256"
        inst "add v21 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v21 v19;"
      inst_stmt "evm_mstore v21 v19"
        inst "evm_mstore v21 v19"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "v19"
            value "v19"
              value_name "v19"
    stmt "evm_mstore v22 $CROWN;"
      inst_stmt "evm_mstore v22 $CROWN"
        inst "evm_mstore v22 $CROWN"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "$CROWN"
            value "$CROWN"
              global_value "$CROWN"
                gv_identifier "$CROWN"
                  gv_name "CROWN"
    stmt "v20.i256 = evm_keccak256 v21 64.i256;"
      assign_stmt "v20.i256 = evm_keccak256 v21 64.i256"
        value_declaration "v20.i256"
          value_name "v20"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v21 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v20 v18;"
      inst_stmt "evm_sstore v20 v18"
        inst "evm_sstore v20 v18"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "v18"
            value "v18"
              value_name "v18"
    stmt "v23.i256 = evm_sload $GLOBEWITHMERIDIANS;"
      assign_stmt "v23.i256 = evm_sload $GLOBEWITHMERIDIANS"
        value_declaration "v23.i256"
          value_name "v23"
          type_name "i256"
            primitive_type "i256"
        inst "evm_sload $GLOBEWITHMERIDIANS"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GLOBEWITHMERIDIANS"
            value "$GLOBEWITHMERIDIANS"
              global_value "$GLOBEWITHMERIDIANS"
                gv_identifier "$GLOBEWITHMERIDIANS"
                  gv_name "GLOBEWITHMERIDIANS"
    stmt "v24.i256 = add v23 1.i256;"
      assign_stmt "v24.i256 = add v23 1.i256"
        value_declaration "v24.i256"
          value_name "v24"
          type_name "i256"
            primitive_type "i256"
        inst "add v23 1.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v23"
            value "v23"
              value_name "v23"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "evm_sstore $GLOBEWITHMERIDIANS v24;"
      inst_stmt "evm_sstore $GLOBEWITHMERIDIANS v24"
        inst "evm_sstore $GLOBEWITHMERIDIANS v24"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "$GLOBEWITHMERIDIANS"
            value "$GLOBEWITHMERIDIANS"
              global_value "$GLOBEWITHMERIDIANS"
                gv_identifier "$GLOBEWITHMERIDIANS"
                  gv_name "GLOBEWITHMERIDIANS"
          inst_arg "v24"
            value "v24"
              value_name "v24"
    stmt "v25.i128 = evm_caller;"
      assign_stmt "v25.i128 = evm_caller"
        value_declaration "v25.i128"
          value_name "v25"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v27.i256 = evm_malloc 64.i256;"
      assign_stmt "v27.i256 = evm_malloc 64.i256"
        value_declaration "v27.i256"
          value_name "v27"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v28.i256 = add v27 32.i256;"
      assign_stmt "v28.i256 = add v27 32.i256"
        value_declaration "v28.i256"
          value_name "v28"
          type_name "i256"
            primitive_type "i256"
        inst "add v27 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v27 v25;"
      inst_stmt "evm_mstore v27 v25"
        inst "evm_mstore v27 v25"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "v25"
            value "v25"
              value_name "v25"
    stmt "evm_mstore v28 $ABACUS;"
      inst_stmt "evm_mstore v28 $ABACUS"
        inst "evm_mstore v28 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v28"
            value "v28"
              value_name "v28"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v26.i256 = evm_keccak256 v27 64.i256;"
      assign_stmt "v26.i256 = evm_keccak256 v27 64.i256"
        value_declaration "v26.i256"
          value_name "v26"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v27 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v29.i256 = add v26 1.i256;"
      assign_stmt "v29.i256 = add v26 1.i256"
        value_declaration "v29.i256"
          value_name "v29"
          type_name "i256"
            primitive_type "i256"
        inst "add v26 1.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v26"
            value "v26"
              value_name "v26"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "v30.i128 = evm_caller;"
      assign_stmt "v30.i128 = evm_caller"
        value_declaration "v30.i128"
          value_name "v30"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v32.i256 = evm_malloc 64.i256;"
      assign_stmt "v32.i256 = evm_malloc 64.i256"
        value_declaration "v32.i256"
          value_name "v32"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v33.i256 = add v32 32.i256;"
      assign_stmt "v33.i256 = add v32 32.i256"
        value_declaration "v33.i256"
          value_name "v33"
          type_name "i256"
            primitive_type "i256"
        inst "add v32 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v32 v30;"
      inst_stmt "evm_mstore v32 v30"
        inst "evm_mstore v32 v30"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "v30"
            value "v30"
              value_name "v30"
    stmt "evm_mstore v33 $ABACUS;"
      inst_stmt "evm_mstore v33 $ABACUS"
        inst "evm_mstore v33 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v33"
            value "v33"
              value_name "v33"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v31.i256 = evm_keccak256 v32 64.i256;"
      assign_stmt "v31.i256 = evm_keccak256 v32 64.i256"
        value_declaration "v31.i256"
          value_name "v31"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v32 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v31 v29;"
      inst_stmt "evm_sstore v31 v29"
        inst "evm_sstore v31 v29"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v31"
            value "v31"
              value_name "v31"
          inst_arg "v29"
            value "v29"
              value_name "v29"
    stmt "v34.i256 = evm_malloc 32.i256;"
      assign_stmt "v34.i256 = evm_malloc 32.i256"
        value_declaration "v34.i256"
          value_name "v34"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v34 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;"
      inst_stmt "evm_mstore v34 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
        inst "evm_mstore v34 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v34"
            value "v34"
              value_name "v34"
          inst_arg "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
            value "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
              imm_number "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
                hex "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
                primitive_type "i256"
    stmt "v35.i128 = evm_caller;"
      assign_stmt "v35.i128 = evm_caller"
        value_declaration "v35.i128"
          value_name "v35"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v36.i256 = evm_sload $GLOBEWITHMERIDIANS;"
      assign_stmt "v36.i256 = evm_sload $GLOBEWITHMERIDIANS"
        value_declaration "v36.i256"
          value_name "v36"
          type_name "i256"
            primitive_type "i256"
        inst "evm_sload $GLOBEWITHMERIDIANS"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GLOBEWITHMERIDIANS"
            value "$GLOBEWITHMERIDIANS"
              global_value "$GLOBEWITHMERIDIANS"
                gv_identifier "$GLOBEWITHMERIDIANS"
                  gv_name "GLOBEWITHMERIDIANS"
    stmt "v37.i256 = evm_sload $GLOBEWITHMERIDIANS;"
      assign_stmt "v37.i256 = evm_sload $GLOBEWITHMERIDIANS"
        value_declaration "v37.i256"
          value_name "v37"
          type_name "i256"
            primitive_type "i256"
        inst "evm_sload $GLOBEWITHMERIDIANS"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GLOBEWITHMERIDIANS"
            value "$GLOBEWITHMERIDIANS"
              global_value "$GLOBEWITHMERIDIANS"
                gv_identifier "$GLOBEWITHMERIDIANS"
                  gv_name "GLOBEWITHMERIDIANS"
    stmt "evm_log5 v34 32.i256 v0 v35 v36 v37;"
      inst_stmt "evm_log5 v34 32.i256 v0 v35 v36 v37"
        inst "evm_log5 v34 32.i256 v0 v35 v36 v37"
          inst_name "evm_log5"
            inst_identifier "evm_log5"
          inst_arg "v34"
            value "v34"
              value_name "v34"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v35"
            value "v35"
              value_name "v35"
          inst_arg "v36"
            value "v36"
              value_name "v36"
          inst_arg "v37"
            value "v37"
              value_name "v37"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %wrappedGiftWhiteHeavyCheckMark(v0.i128, v1.i256) -> i1 {
  block0:
    v2.i128 = evm_sload $GEAR;
    v3.i128 = evm_caller;
    v4.i128 = eq v2 v3;
    v5.i128 = eq v4 0.i256;
    br v5 block1 block2;
  block1:
    evm_revert 0.i256 0.i256;
    jump block2;
  block2:
    v7.i256 = evm_malloc 64.i256;
    v8.i256 = add v7 32.i256;
    evm_mstore v7 v0;
    evm_mstore v8 $WRAPPEDGIFT;
    v6.i256 = evm_keccak256 v7 64.i256;
    evm_sstore v6 v1;
    return 1.i1;
}"
  function_signature "func private %wrappedGiftWhiteHeavyCheckMark(v0.i128, v1.i256) -> i1"
    linkage "private"
    function_identifier "%wrappedGiftWhiteHeavyCheckMark"
      function_name "wrappedGiftWhiteHeavyCheckMark"
    function_params "(v0.i128, v1.i256)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v1.i256"
        value_name "v1"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v2.i128 = evm_sload $GEAR;
      v3.i128 = evm_caller;
      v4.i128 = eq v2 v3;
      v5.i128 = eq v4 0.i256;
      br v5 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i128 = evm_sload $GEAR;"
      assign_stmt "v2.i128 = evm_sload $GEAR"
        value_declaration "v2.i128"
          value_name "v2"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $GEAR"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GEAR"
            value "$GEAR"
              global_value "$GEAR"
                gv_identifier "$GEAR"
                  gv_name "GEAR"
    stmt "v3.i128 = evm_caller;"
      assign_stmt "v3.i128 = evm_caller"
        value_declaration "v3.i128"
          value_name "v3"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v4.i128 = eq v2 v3;"
      assign_stmt "v4.i128 = eq v2 v3"
        value_declaration "v4.i128"
          value_name "v4"
          type_name "i128"
            primitive_type "i128"
        inst "eq v2 v3"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "v5.i128 = eq v4 0.i256;"
      assign_stmt "v5.i128 = eq v4 0.i256"
        value_declaration "v5.i128"
          value_name "v5"
          type_name "i128"
            primitive_type "i128"
        inst "eq v4 0.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v5 block1 block2;"
      inst_stmt "br v5 block1 block2"
        inst "br v5 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      evm_revert 0.i256 0.i256;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v7.i256 = evm_malloc 64.i256;
      v8.i256 = add v7 32.i256;
      evm_mstore v7 v0;
      evm_mstore v8 $WRAPPEDGIFT;
      v6.i256 = evm_keccak256 v7 64.i256;
      evm_sstore v6 v1;
      return 1.i1;"
    block_ident "block2"
      block_number "2"
    stmt "v7.i256 = evm_malloc 64.i256;"
      assign_stmt "v7.i256 = evm_malloc 64.i256"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v8.i256 = add v7 32.i256;"
      assign_stmt "v8.i256 = add v7 32.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "add v7 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v7 v0;"
      inst_stmt "evm_mstore v7 v0"
        inst "evm_mstore v7 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v8 $WRAPPEDGIFT;"
      inst_stmt "evm_mstore v8 $WRAPPEDGIFT"
        inst "evm_mstore v8 $WRAPPEDGIFT"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "$WRAPPEDGIFT"
            value "$WRAPPEDGIFT"
              global_value "$WRAPPEDGIFT"
                gv_identifier "$WRAPPEDGIFT"
                  gv_name "WRAPPEDGIFT"
    stmt "v6.i256 = evm_keccak256 v7 64.i256;"
      assign_stmt "v6.i256 = evm_keccak256 v7 64.i256"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v7 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v6 v1;"
      inst_stmt "evm_sstore v6 v1"
        inst "evm_sstore v6 v1"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %wrappedGiftMoneyWithWings(v0.i256, v1.i256) -> i1 {
  block0:
    v2.i128 = evm_sload $GEAR;
    v3.i128 = evm_caller;
    v4.i128 = eq v2 v3;
    v5.i128 = eq v4 0.i256;
    br v5 block1 block2;
  block1:
    evm_revert 0.i256 0.i256;
    jump block2;
  block2:
    v6.i128 = evm_caller;
    v7.i256 = evm_call v1 v6 v0 0.i256 0.i256 0.i256 0.i256;
    br v7 block3 block4;
  block4:
    evm_revert 0.i256 0.i256;
  block3:
    return 1.i1;
}"
  function_signature "func private %wrappedGiftMoneyWithWings(v0.i256, v1.i256) -> i1"
    linkage "private"
    function_identifier "%wrappedGiftMoneyWithWings"
      function_name "wrappedGiftMoneyWithWings"
    function_params "(v0.i256, v1.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
      value_declaration "v1.i256"
        value_name "v1"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v2.i128 = evm_sload $GEAR;
      v3.i128 = evm_caller;
      v4.i128 = eq v2 v3;
      v5.i128 = eq v4 0.i256;
      br v5 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i128 = evm_sload $GEAR;"
      assign_stmt "v2.i128 = evm_sload $GEAR"
        value_declaration "v2.i128"
          value_name "v2"
          type_name "i128"
            primitive_type "i128"
        inst "evm_sload $GEAR"
          inst_name "evm_sload"
            inst_identifier "evm_sload"
          inst_arg "$GEAR"
            value "$GEAR"
              global_value "$GEAR"
                gv_identifier "$GEAR"
                  gv_name "GEAR"
    stmt "v3.i128 = evm_caller;"
      assign_stmt "v3.i128 = evm_caller"
        value_declaration "v3.i128"
          value_name "v3"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v4.i128 = eq v2 v3;"
      assign_stmt "v4.i128 = eq v2 v3"
        value_declaration "v4.i128"
          value_name "v4"
          type_name "i128"
            primitive_type "i128"
        inst "eq v2 v3"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "v5.i128 = eq v4 0.i256;"
      assign_stmt "v5.i128 = eq v4 0.i256"
        value_declaration "v5.i128"
          value_name "v5"
          type_name "i128"
            primitive_type "i128"
        inst "eq v4 0.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v5 block1 block2;"
      inst_stmt "br v5 block1 block2"
        inst "br v5 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      evm_revert 0.i256 0.i256;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v6.i128 = evm_caller;
      v7.i256 = evm_call v1 v6 v0 0.i256 0.i256 0.i256 0.i256;
      br v7 block3 block4;"
    block_ident "block2"
      block_number "2"
    stmt "v6.i128 = evm_caller;"
      assign_stmt "v6.i128 = evm_caller"
        value_declaration "v6.i128"
          value_name "v6"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v7.i256 = evm_call v1 v6 v0 0.i256 0.i256 0.i256 0.i256;"
      assign_stmt "v7.i256 = evm_call v1 v6 v0 0.i256 0.i256 0.i256 0.i256"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "evm_call v1 v6 v0 0.i256 0.i256 0.i256 0.i256"
          inst_name "evm_call"
            inst_identifier "evm_call"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v7 block3 block4;"
      inst_stmt "br v7 block3 block4"
        inst "br v7 block3 block4"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "block3"
            block_ident "block3"
              block_number "3"
          inst_arg "block4"
            block_ident "block4"
              block_number "4"
  block "block4:
      evm_revert 0.i256 0.i256;"
    block_ident "block4"
      block_number "4"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
  block "block3:
      return 1.i1;"
    block_ident "block3"
      block_number "3"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %approve(v0.i128, v1.i256) -> i1 {
  block0:
    v3.i256 = evm_malloc 64.i256;
    v4.i256 = add v3 32.i256;
    evm_mstore v3 v1;
    evm_mstore v4 $CROWN;
    v2.i256 = evm_keccak256 v3 64.i256;
    v5.i128 = evm_caller;
    v6.i256 = eq v2 v5;
    v7.i256 = eq v6 0.i256;
    br v7 block1 block2;
  block1:
    evm_revert 0.i256 0.i256;
    jump block2;
  block2:
    v9.i256 = evm_malloc 64.i256;
    v10.i256 = add v9 32.i256;
    evm_mstore v9 v1;
    evm_mstore v10 $PASSPORTCONTROL;
    v8.i256 = evm_keccak256 v9 64.i256;
    evm_sstore v8 v0;
    v11.i256 = evm_malloc 32.i256;
    evm_mstore v11 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256;
    v12.i128 = evm_caller;
    evm_log5 v11 32.i256 v12 v0 v1 v1;
    return 1.i1;
}"
  function_signature "func private %approve(v0.i128, v1.i256) -> i1"
    linkage "private"
    function_identifier "%approve"
      function_name "approve"
    function_params "(v0.i128, v1.i256)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v1.i256"
        value_name "v1"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v3.i256 = evm_malloc 64.i256;
      v4.i256 = add v3 32.i256;
      evm_mstore v3 v1;
      evm_mstore v4 $CROWN;
      v2.i256 = evm_keccak256 v3 64.i256;
      v5.i128 = evm_caller;
      v6.i256 = eq v2 v5;
      v7.i256 = eq v6 0.i256;
      br v7 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v3.i256 = evm_malloc 64.i256;"
      assign_stmt "v3.i256 = evm_malloc 64.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v4.i256 = add v3 32.i256;"
      assign_stmt "v4.i256 = add v3 32.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "add v3 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v3 v1;"
      inst_stmt "evm_mstore v3 v1"
        inst "evm_mstore v3 v1"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "evm_mstore v4 $CROWN;"
      inst_stmt "evm_mstore v4 $CROWN"
        inst "evm_mstore v4 $CROWN"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "$CROWN"
            value "$CROWN"
              global_value "$CROWN"
                gv_identifier "$CROWN"
                  gv_name "CROWN"
    stmt "v2.i256 = evm_keccak256 v3 64.i256;"
      assign_stmt "v2.i256 = evm_keccak256 v3 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v3 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v5.i128 = evm_caller;"
      assign_stmt "v5.i128 = evm_caller"
        value_declaration "v5.i128"
          value_name "v5"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v6.i256 = eq v2 v5;"
      assign_stmt "v6.i256 = eq v2 v5"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "eq v2 v5"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v5"
            value "v5"
              value_name "v5"
    stmt "v7.i256 = eq v6 0.i256;"
      assign_stmt "v7.i256 = eq v6 0.i256"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "eq v6 0.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v7 block1 block2;"
      inst_stmt "br v7 block1 block2"
        inst "br v7 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      evm_revert 0.i256 0.i256;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v9.i256 = evm_malloc 64.i256;
      v10.i256 = add v9 32.i256;
      evm_mstore v9 v1;
      evm_mstore v10 $PASSPORTCONTROL;
      v8.i256 = evm_keccak256 v9 64.i256;
      evm_sstore v8 v0;
      v11.i256 = evm_malloc 32.i256;
      evm_mstore v11 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256;
      v12.i128 = evm_caller;
      evm_log5 v11 32.i256 v12 v0 v1 v1;
      return 1.i1;"
    block_ident "block2"
      block_number "2"
    stmt "v9.i256 = evm_malloc 64.i256;"
      assign_stmt "v9.i256 = evm_malloc 64.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v10.i256 = add v9 32.i256;"
      assign_stmt "v10.i256 = add v9 32.i256"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "add v9 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v9 v1;"
      inst_stmt "evm_mstore v9 v1"
        inst "evm_mstore v9 v1"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "evm_mstore v10 $PASSPORTCONTROL;"
      inst_stmt "evm_mstore v10 $PASSPORTCONTROL"
        inst "evm_mstore v10 $PASSPORTCONTROL"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v10"
            value "v10"
              value_name "v10"
          inst_arg "$PASSPORTCONTROL"
            value "$PASSPORTCONTROL"
              global_value "$PASSPORTCONTROL"
                gv_identifier "$PASSPORTCONTROL"
                  gv_name "PASSPORTCONTROL"
    stmt "v8.i256 = evm_keccak256 v9 64.i256;"
      assign_stmt "v8.i256 = evm_keccak256 v9 64.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v9 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v8 v0;"
      inst_stmt "evm_sstore v8 v0"
        inst "evm_sstore v8 v0"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "v11.i256 = evm_malloc 32.i256;"
      assign_stmt "v11.i256 = evm_malloc 32.i256"
        value_declaration "v11.i256"
          value_name "v11"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v11 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256;"
      inst_stmt "evm_mstore v11 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256"
        inst "evm_mstore v11 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256"
            value "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256"
              imm_number "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925.i256"
                hex "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
                primitive_type "i256"
    stmt "v12.i128 = evm_caller;"
      assign_stmt "v12.i128 = evm_caller"
        value_declaration "v12.i128"
          value_name "v12"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "evm_log5 v11 32.i256 v12 v0 v1 v1;"
      inst_stmt "evm_log5 v11 32.i256 v12 v0 v1 v1"
        inst "evm_log5 v11 32.i256 v12 v0 v1 v1"
          inst_name "evm_log5"
            inst_identifier "evm_log5"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "v12"
            value "v12"
              value_name "v12"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %setApprovalForAll(v0.i128, v1.i1) -> i1 {
  block0:
    v2.i128 = evm_caller;
    v4.i256 = evm_malloc 64.i256;
    v5.i256 = add v4 32.i256;
    evm_mstore v4 v2;
    evm_mstore v5 $JOYSTICK;
    v3.i256 = evm_keccak256 v4 64.i256;
    evm_sstore v3 v1;
    v6.i256 = evm_malloc 32.i256;
    evm_mstore v6 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256;
    v7.i128 = evm_caller;
    evm_log4 v6 32.i256 v7 v0 v1;
    return 1.i1;
}"
  function_signature "func private %setApprovalForAll(v0.i128, v1.i1) -> i1"
    linkage "private"
    function_identifier "%setApprovalForAll"
      function_name "setApprovalForAll"
    function_params "(v0.i128, v1.i1)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v1.i1"
        value_name "v1"
        type_name "i1"
          primitive_type "i1"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v2.i128 = evm_caller;
      v4.i256 = evm_malloc 64.i256;
      v5.i256 = add v4 32.i256;
      evm_mstore v4 v2;
      evm_mstore v5 $JOYSTICK;
      v3.i256 = evm_keccak256 v4 64.i256;
      evm_sstore v3 v1;
      v6.i256 = evm_malloc 32.i256;
      evm_mstore v6 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256;
      v7.i128 = evm_caller;
      evm_log4 v6 32.i256 v7 v0 v1;
      return 1.i1;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i128 = evm_caller;"
      assign_stmt "v2.i128 = evm_caller"
        value_declaration "v2.i128"
          value_name "v2"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v4.i256 = evm_malloc 64.i256;"
      assign_stmt "v4.i256 = evm_malloc 64.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v5.i256 = add v4 32.i256;"
      assign_stmt "v5.i256 = add v4 32.i256"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "add v4 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v4 v2;"
      inst_stmt "evm_mstore v4 v2"
        inst "evm_mstore v4 v2"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "evm_mstore v5 $JOYSTICK;"
      inst_stmt "evm_mstore v5 $JOYSTICK"
        inst "evm_mstore v5 $JOYSTICK"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "$JOYSTICK"
            value "$JOYSTICK"
              global_value "$JOYSTICK"
                gv_identifier "$JOYSTICK"
                  gv_name "JOYSTICK"
    stmt "v3.i256 = evm_keccak256 v4 64.i256;"
      assign_stmt "v3.i256 = evm_keccak256 v4 64.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v4 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v3 v1;"
      inst_stmt "evm_sstore v3 v1"
        inst "evm_sstore v3 v1"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v6.i256 = evm_malloc 32.i256;"
      assign_stmt "v6.i256 = evm_malloc 32.i256"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v6 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256;"
      inst_stmt "evm_mstore v6 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256"
        inst "evm_mstore v6 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256"
            value "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256"
              imm_number "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31.i256"
                hex "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
                primitive_type "i256"
    stmt "v7.i128 = evm_caller;"
      assign_stmt "v7.i128 = evm_caller"
        value_declaration "v7.i128"
          value_name "v7"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "evm_log4 v6 32.i256 v7 v0 v1;"
      inst_stmt "evm_log4 v6 32.i256 v7 v0 v1"
        inst "evm_log4 v6 32.i256 v7 v0 v1"
          inst_name "evm_log4"
            inst_identifier "evm_log4"
          inst_arg "v6"
            value "v6"
              value_name "v6"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %transferFrom(v0.i128, v1.i128, v2.i256) -> i1 {
  block0:
    v4.i256 = evm_malloc 64.i256;
    v5.i256 = add v4 32.i256;
    evm_mstore v4 v2;
    evm_mstore v5 $CROWN;
    v3.i256 = evm_keccak256 v4 64.i256;
    v6.i128 = evm_caller;
    v7.i256 = eq v3 v6;
    v9.i256 = evm_malloc 64.i256;
    v10.i256 = add v9 32.i256;
    evm_mstore v9 v2;
    evm_mstore v10 $PASSPORTCONTROL;
    v8.i256 = evm_keccak256 v9 64.i256;
    v11.i128 = evm_caller;
    v12.i256 = eq v8 v11;
    v13.i256 = add v7 v12;
    v15.i256 = evm_malloc 64.i256;
    v16.i256 = add v15 32.i256;
    evm_mstore v15 v0;
    evm_mstore v16 $JOYSTICK;
    v14.i256 = evm_keccak256 v15 64.i256;
    v17.i128 = evm_caller;
    v18.i256 = eq v14 v17;
    v19.i256 = add v13 v18;
    v20.i256 = eq v19 0.i256;
    br v20 block1 block2;
  block1:
    evm_revert 0.i256 0.i256;
    jump block2;
  block2:
    v22.i256 = evm_malloc 64.i256;
    v23.i256 = add v22 32.i256;
    evm_mstore v22 v2;
    evm_mstore v23 $CROWN;
    v21.i256 = evm_keccak256 v22 64.i256;
    evm_sstore v21 v1;
    v25.i256 = evm_malloc 64.i256;
    v26.i256 = add v25 32.i256;
    evm_mstore v25 v2;
    evm_mstore v26 $PASSPORTCONTROL;
    v24.i256 = evm_keccak256 v25 64.i256;
    evm_sstore v24 0.i256;
    v28.i256 = evm_malloc 64.i256;
    v29.i256 = add v28 32.i256;
    evm_mstore v28 v0;
    evm_mstore v29 $ABACUS;
    v27.i256 = evm_keccak256 v28 64.i256;
    v30.i256 = sub v27 1.i256;
    v32.i256 = evm_malloc 64.i256;
    v33.i256 = add v32 32.i256;
    evm_mstore v32 v0;
    evm_mstore v33 $ABACUS;
    v31.i256 = evm_keccak256 v32 64.i256;
    evm_sstore v31 v30;
    v35.i256 = evm_malloc 64.i256;
    v36.i256 = add v35 32.i256;
    evm_mstore v35 v1;
    evm_mstore v36 $ABACUS;
    v34.i256 = evm_keccak256 v35 64.i256;
    v37.i256 = add v34 1.i256;
    v39.i256 = evm_malloc 64.i256;
    v40.i256 = add v39 32.i256;
    evm_mstore v39 v1;
    evm_mstore v40 $ABACUS;
    v38.i256 = evm_keccak256 v39 64.i256;
    evm_sstore v38 v37;
    v41.i256 = evm_malloc 32.i256;
    evm_mstore v41 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
    evm_log5 v41 32.i256 v0 v1 v2 v2;
    return 1.i1;
}"
  function_signature "func private %transferFrom(v0.i128, v1.i128, v2.i256) -> i1"
    linkage "private"
    function_identifier "%transferFrom"
      function_name "transferFrom"
    function_params "(v0.i128, v1.i128, v2.i256)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v1.i128"
        value_name "v1"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v2.i256"
        value_name "v2"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v4.i256 = evm_malloc 64.i256;
      v5.i256 = add v4 32.i256;
      evm_mstore v4 v2;
      evm_mstore v5 $CROWN;
      v3.i256 = evm_keccak256 v4 64.i256;
      v6.i128 = evm_caller;
      v7.i256 = eq v3 v6;
      v9.i256 = evm_malloc 64.i256;
      v10.i256 = add v9 32.i256;
      evm_mstore v9 v2;
      evm_mstore v10 $PASSPORTCONTROL;
      v8.i256 = evm_keccak256 v9 64.i256;
      v11.i128 = evm_caller;
      v12.i256 = eq v8 v11;
      v13.i256 = add v7 v12;
      v15.i256 = evm_malloc 64.i256;
      v16.i256 = add v15 32.i256;
      evm_mstore v15 v0;
      evm_mstore v16 $JOYSTICK;
      v14.i256 = evm_keccak256 v15 64.i256;
      v17.i128 = evm_caller;
      v18.i256 = eq v14 v17;
      v19.i256 = add v13 v18;
      v20.i256 = eq v19 0.i256;
      br v20 block1 block2;"
    block_ident "block0"
      block_number "0"
    stmt "v4.i256 = evm_malloc 64.i256;"
      assign_stmt "v4.i256 = evm_malloc 64.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v5.i256 = add v4 32.i256;"
      assign_stmt "v5.i256 = add v4 32.i256"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "add v4 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v4 v2;"
      inst_stmt "evm_mstore v4 v2"
        inst "evm_mstore v4 v2"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "evm_mstore v5 $CROWN;"
      inst_stmt "evm_mstore v5 $CROWN"
        inst "evm_mstore v5 $CROWN"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "$CROWN"
            value "$CROWN"
              global_value "$CROWN"
                gv_identifier "$CROWN"
                  gv_name "CROWN"
    stmt "v3.i256 = evm_keccak256 v4 64.i256;"
      assign_stmt "v3.i256 = evm_keccak256 v4 64.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v4 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v6.i128 = evm_caller;"
      assign_stmt "v6.i128 = evm_caller"
        value_declaration "v6.i128"
          value_name "v6"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v7.i256 = eq v3 v6;"
      assign_stmt "v7.i256 = eq v3 v6"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "eq v3 v6"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "v6"
            value "v6"
              value_name "v6"
    stmt "v9.i256 = evm_malloc 64.i256;"
      assign_stmt "v9.i256 = evm_malloc 64.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v10.i256 = add v9 32.i256;"
      assign_stmt "v10.i256 = add v9 32.i256"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "add v9 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v9 v2;"
      inst_stmt "evm_mstore v9 v2"
        inst "evm_mstore v9 v2"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "evm_mstore v10 $PASSPORTCONTROL;"
      inst_stmt "evm_mstore v10 $PASSPORTCONTROL"
        inst "evm_mstore v10 $PASSPORTCONTROL"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v10"
            value "v10"
              value_name "v10"
          inst_arg "$PASSPORTCONTROL"
            value "$PASSPORTCONTROL"
              global_value "$PASSPORTCONTROL"
                gv_identifier "$PASSPORTCONTROL"
                  gv_name "PASSPORTCONTROL"
    stmt "v8.i256 = evm_keccak256 v9 64.i256;"
      assign_stmt "v8.i256 = evm_keccak256 v9 64.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v9 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v9"
            value "v9"
              value_name "v9"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v11.i128 = evm_caller;"
      assign_stmt "v11.i128 = evm_caller"
        value_declaration "v11.i128"
          value_name "v11"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v12.i256 = eq v8 v11;"
      assign_stmt "v12.i256 = eq v8 v11"
        value_declaration "v12.i256"
          value_name "v12"
          type_name "i256"
            primitive_type "i256"
        inst "eq v8 v11"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v8"
            value "v8"
              value_name "v8"
          inst_arg "v11"
            value "v11"
              value_name "v11"
    stmt "v13.i256 = add v7 v12;"
      assign_stmt "v13.i256 = add v7 v12"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "add v7 v12"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v7"
            value "v7"
              value_name "v7"
          inst_arg "v12"
            value "v12"
              value_name "v12"
    stmt "v15.i256 = evm_malloc 64.i256;"
      assign_stmt "v15.i256 = evm_malloc 64.i256"
        value_declaration "v15.i256"
          value_name "v15"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v16.i256 = add v15 32.i256;"
      assign_stmt "v16.i256 = add v15 32.i256"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "add v15 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v15"
            value "v15"
              value_name "v15"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v15 v0;"
      inst_stmt "evm_mstore v15 v0"
        inst "evm_mstore v15 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v15"
            value "v15"
              value_name "v15"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v16 $JOYSTICK;"
      inst_stmt "evm_mstore v16 $JOYSTICK"
        inst "evm_mstore v16 $JOYSTICK"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v16"
            value "v16"
              value_name "v16"
          inst_arg "$JOYSTICK"
            value "$JOYSTICK"
              global_value "$JOYSTICK"
                gv_identifier "$JOYSTICK"
                  gv_name "JOYSTICK"
    stmt "v14.i256 = evm_keccak256 v15 64.i256;"
      assign_stmt "v14.i256 = evm_keccak256 v15 64.i256"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v15 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v15"
            value "v15"
              value_name "v15"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v17.i128 = evm_caller;"
      assign_stmt "v17.i128 = evm_caller"
        value_declaration "v17.i128"
          value_name "v17"
          type_name "i128"
            primitive_type "i128"
        inst "evm_caller"
          inst_name "evm_caller"
            inst_identifier "evm_caller"
    stmt "v18.i256 = eq v14 v17;"
      assign_stmt "v18.i256 = eq v14 v17"
        value_declaration "v18.i256"
          value_name "v18"
          type_name "i256"
            primitive_type "i256"
        inst "eq v14 v17"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v14"
            value "v14"
              value_name "v14"
          inst_arg "v17"
            value "v17"
              value_name "v17"
    stmt "v19.i256 = add v13 v18;"
      assign_stmt "v19.i256 = add v13 v18"
        value_declaration "v19.i256"
          value_name "v19"
          type_name "i256"
            primitive_type "i256"
        inst "add v13 v18"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v13"
            value "v13"
              value_name "v13"
          inst_arg "v18"
            value "v18"
              value_name "v18"
    stmt "v20.i256 = eq v19 0.i256;"
      assign_stmt "v20.i256 = eq v19 0.i256"
        value_declaration "v20.i256"
          value_name "v20"
          type_name "i256"
            primitive_type "i256"
        inst "eq v19 0.i256"
          inst_name "eq"
            inst_identifier "eq"
          inst_arg "v19"
            value "v19"
              value_name "v19"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "br v20 block1 block2;"
      inst_stmt "br v20 block1 block2"
        inst "br v20 block1 block2"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v20"
            value "v20"
              value_name "v20"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      evm_revert 0.i256 0.i256;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "evm_revert 0.i256 0.i256;"
      inst_stmt "evm_revert 0.i256 0.i256"
        inst "evm_revert 0.i256 0.i256"
          inst_name "evm_revert"
            inst_identifier "evm_revert"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v22.i256 = evm_malloc 64.i256;
      v23.i256 = add v22 32.i256;
      evm_mstore v22 v2;
      evm_mstore v23 $CROWN;
      v21.i256 = evm_keccak256 v22 64.i256;
      evm_sstore v21 v1;
      v25.i256 = evm_malloc 64.i256;
      v26.i256 = add v25 32.i256;
      evm_mstore v25 v2;
      evm_mstore v26 $PASSPORTCONTROL;
      v24.i256 = evm_keccak256 v25 64.i256;
      evm_sstore v24 0.i256;
      v28.i256 = evm_malloc 64.i256;
      v29.i256 = add v28 32.i256;
      evm_mstore v28 v0;
      evm_mstore v29 $ABACUS;
      v27.i256 = evm_keccak256 v28 64.i256;
      v30.i256 = sub v27 1.i256;
      v32.i256 = evm_malloc 64.i256;
      v33.i256 = add v32 32.i256;
      evm_mstore v32 v0;
      evm_mstore v33 $ABACUS;
      v31.i256 = evm_keccak256 v32 64.i256;
      evm_sstore v31 v30;
      v35.i256 = evm_malloc 64.i256;
      v36.i256 = add v35 32.i256;
      evm_mstore v35 v1;
      evm_mstore v36 $ABACUS;
      v34.i256 = evm_keccak256 v35 64.i256;
      v37.i256 = add v34 1.i256;
      v39.i256 = evm_malloc 64.i256;
      v40.i256 = add v39 32.i256;
      evm_mstore v39 v1;
      evm_mstore v40 $ABACUS;
      v38.i256 = evm_keccak256 v39 64.i256;
      evm_sstore v38 v37;
      v41.i256 = evm_malloc 32.i256;
      evm_mstore v41 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;
      evm_log5 v41 32.i256 v0 v1 v2 v2;
      return 1.i1;"
    block_ident "block2"
      block_number "2"
    stmt "v22.i256 = evm_malloc 64.i256;"
      assign_stmt "v22.i256 = evm_malloc 64.i256"
        value_declaration "v22.i256"
          value_name "v22"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v23.i256 = add v22 32.i256;"
      assign_stmt "v23.i256 = add v22 32.i256"
        value_declaration "v23.i256"
          value_name "v23"
          type_name "i256"
            primitive_type "i256"
        inst "add v22 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v22 v2;"
      inst_stmt "evm_mstore v22 v2"
        inst "evm_mstore v22 v2"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "evm_mstore v23 $CROWN;"
      inst_stmt "evm_mstore v23 $CROWN"
        inst "evm_mstore v23 $CROWN"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v23"
            value "v23"
              value_name "v23"
          inst_arg "$CROWN"
            value "$CROWN"
              global_value "$CROWN"
                gv_identifier "$CROWN"
                  gv_name "CROWN"
    stmt "v21.i256 = evm_keccak256 v22 64.i256;"
      assign_stmt "v21.i256 = evm_keccak256 v22 64.i256"
        value_declaration "v21.i256"
          value_name "v21"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v22 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v22"
            value "v22"
              value_name "v22"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v21 v1;"
      inst_stmt "evm_sstore v21 v1"
        inst "evm_sstore v21 v1"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v21"
            value "v21"
              value_name "v21"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "v25.i256 = evm_malloc 64.i256;"
      assign_stmt "v25.i256 = evm_malloc 64.i256"
        value_declaration "v25.i256"
          value_name "v25"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v26.i256 = add v25 32.i256;"
      assign_stmt "v26.i256 = add v25 32.i256"
        value_declaration "v26.i256"
          value_name "v26"
          type_name "i256"
            primitive_type "i256"
        inst "add v25 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v25 v2;"
      inst_stmt "evm_mstore v25 v2"
        inst "evm_mstore v25 v2"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "evm_mstore v26 $PASSPORTCONTROL;"
      inst_stmt "evm_mstore v26 $PASSPORTCONTROL"
        inst "evm_mstore v26 $PASSPORTCONTROL"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v26"
            value "v26"
              value_name "v26"
          inst_arg "$PASSPORTCONTROL"
            value "$PASSPORTCONTROL"
              global_value "$PASSPORTCONTROL"
                gv_identifier "$PASSPORTCONTROL"
                  gv_name "PASSPORTCONTROL"
    stmt "v24.i256 = evm_keccak256 v25 64.i256;"
      assign_stmt "v24.i256 = evm_keccak256 v25 64.i256"
        value_declaration "v24.i256"
          value_name "v24"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v25 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v25"
            value "v25"
              value_name "v25"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v24 0.i256;"
      inst_stmt "evm_sstore v24 0.i256"
        inst "evm_sstore v24 0.i256"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v24"
            value "v24"
              value_name "v24"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
    stmt "v28.i256 = evm_malloc 64.i256;"
      assign_stmt "v28.i256 = evm_malloc 64.i256"
        value_declaration "v28.i256"
          value_name "v28"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v29.i256 = add v28 32.i256;"
      assign_stmt "v29.i256 = add v28 32.i256"
        value_declaration "v29.i256"
          value_name "v29"
          type_name "i256"
            primitive_type "i256"
        inst "add v28 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v28"
            value "v28"
              value_name "v28"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v28 v0;"
      inst_stmt "evm_mstore v28 v0"
        inst "evm_mstore v28 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v28"
            value "v28"
              value_name "v28"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v29 $ABACUS;"
      inst_stmt "evm_mstore v29 $ABACUS"
        inst "evm_mstore v29 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v29"
            value "v29"
              value_name "v29"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v27.i256 = evm_keccak256 v28 64.i256;"
      assign_stmt "v27.i256 = evm_keccak256 v28 64.i256"
        value_declaration "v27.i256"
          value_name "v27"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v28 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v28"
            value "v28"
              value_name "v28"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v30.i256 = sub v27 1.i256;"
      assign_stmt "v30.i256 = sub v27 1.i256"
        value_declaration "v30.i256"
          value_name "v30"
          type_name "i256"
            primitive_type "i256"
        inst "sub v27 1.i256"
          inst_name "sub"
            inst_identifier "sub"
          inst_arg "v27"
            value "v27"
              value_name "v27"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "v32.i256 = evm_malloc 64.i256;"
      assign_stmt "v32.i256 = evm_malloc 64.i256"
        value_declaration "v32.i256"
          value_name "v32"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v33.i256 = add v32 32.i256;"
      assign_stmt "v33.i256 = add v32 32.i256"
        value_declaration "v33.i256"
          value_name "v33"
          type_name "i256"
            primitive_type "i256"
        inst "add v32 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v32 v0;"
      inst_stmt "evm_mstore v32 v0"
        inst "evm_mstore v32 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v33 $ABACUS;"
      inst_stmt "evm_mstore v33 $ABACUS"
        inst "evm_mstore v33 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v33"
            value "v33"
              value_name "v33"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v31.i256 = evm_keccak256 v32 64.i256;"
      assign_stmt "v31.i256 = evm_keccak256 v32 64.i256"
        value_declaration "v31.i256"
          value_name "v31"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v32 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v32"
            value "v32"
              value_name "v32"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v31 v30;"
      inst_stmt "evm_sstore v31 v30"
        inst "evm_sstore v31 v30"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v31"
            value "v31"
              value_name "v31"
          inst_arg "v30"
            value "v30"
              value_name "v30"
    stmt "v35.i256 = evm_malloc 64.i256;"
      assign_stmt "v35.i256 = evm_malloc 64.i256"
        value_declaration "v35.i256"
          value_name "v35"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v36.i256 = add v35 32.i256;"
      assign_stmt "v36.i256 = add v35 32.i256"
        value_declaration "v36.i256"
          value_name "v36"
          type_name "i256"
            primitive_type "i256"
        inst "add v35 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v35"
            value "v35"
              value_name "v35"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v35 v1;"
      inst_stmt "evm_mstore v35 v1"
        inst "evm_mstore v35 v1"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v35"
            value "v35"
              value_name "v35"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "evm_mstore v36 $ABACUS;"
      inst_stmt "evm_mstore v36 $ABACUS"
        inst "evm_mstore v36 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v36"
            value "v36"
              value_name "v36"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v34.i256 = evm_keccak256 v35 64.i256;"
      assign_stmt "v34.i256 = evm_keccak256 v35 64.i256"
        value_declaration "v34.i256"
          value_name "v34"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v35 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v35"
            value "v35"
              value_name "v35"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v37.i256 = add v34 1.i256;"
      assign_stmt "v37.i256 = add v34 1.i256"
        value_declaration "v37.i256"
          value_name "v37"
          type_name "i256"
            primitive_type "i256"
        inst "add v34 1.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v34"
            value "v34"
              value_name "v34"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "v39.i256 = evm_malloc 64.i256;"
      assign_stmt "v39.i256 = evm_malloc 64.i256"
        value_declaration "v39.i256"
          value_name "v39"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v40.i256 = add v39 32.i256;"
      assign_stmt "v40.i256 = add v39 32.i256"
        value_declaration "v40.i256"
          value_name "v40"
          type_name "i256"
            primitive_type "i256"
        inst "add v39 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v39"
            value "v39"
              value_name "v39"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v39 v1;"
      inst_stmt "evm_mstore v39 v1"
        inst "evm_mstore v39 v1"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v39"
            value "v39"
              value_name "v39"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "evm_mstore v40 $ABACUS;"
      inst_stmt "evm_mstore v40 $ABACUS"
        inst "evm_mstore v40 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v40"
            value "v40"
              value_name "v40"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v38.i256 = evm_keccak256 v39 64.i256;"
      assign_stmt "v38.i256 = evm_keccak256 v39 64.i256"
        value_declaration "v38.i256"
          value_name "v38"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v39 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v39"
            value "v39"
              value_name "v39"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "evm_sstore v38 v37;"
      inst_stmt "evm_sstore v38 v37"
        inst "evm_sstore v38 v37"
          inst_name "evm_sstore"
            inst_identifier "evm_sstore"
          inst_arg "v38"
            value "v38"
              value_name "v38"
          inst_arg "v37"
            value "v37"
              value_name "v37"
    stmt "v41.i256 = evm_malloc 32.i256;"
      assign_stmt "v41.i256 = evm_malloc 32.i256"
        value_declaration "v41.i256"
          value_name "v41"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v41 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256;"
      inst_stmt "evm_mstore v41 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
        inst "evm_mstore v41 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v41"
            value "v41"
              value_name "v41"
          inst_arg "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
            value "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
              imm_number "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF.i256"
                hex "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
                primitive_type "i256"
    stmt "evm_log5 v41 32.i256 v0 v1 v2 v2;"
      inst_stmt "evm_log5 v41 32.i256 v0 v1 v2 v2"
        inst "evm_log5 v41 32.i256 v0 v1 v2 v2"
          inst_name "evm_log5"
            inst_identifier "evm_log5"
          inst_arg "v41"
            value "v41"
              value_name "v41"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v2"
            value "v2"
              value_name "v2"
    stmt "return 1.i1;"
      inst_stmt "return 1.i1"
        inst "return 1.i1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1.i1"
            value "1.i1"
              imm_number "1.i1"
                decimal "1"
                primitive_type "i1"
function "func private %getApproved(v0.i256) -> i128 {
  block0:
    v2.i256 = evm_malloc 64.i256;
    v3.i256 = add v2 32.i256;
    evm_mstore v2 v0;
    evm_mstore v3 $PASSPORTCONTROL;
    v1.i256 = evm_keccak256 v2 64.i256;
    return v1;
}"
  function_signature "func private %getApproved(v0.i256) -> i128"
    linkage "private"
    function_identifier "%getApproved"
      function_name "getApproved"
    function_params "(v0.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i128"
      type_name "i128"
        primitive_type "i128"
  block "block0:
      v2.i256 = evm_malloc 64.i256;
      v3.i256 = add v2 32.i256;
      evm_mstore v2 v0;
      evm_mstore v3 $PASSPORTCONTROL;
      v1.i256 = evm_keccak256 v2 64.i256;
      return v1;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i256 = evm_malloc 64.i256;"
      assign_stmt "v2.i256 = evm_malloc 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v3.i256 = add v2 32.i256;"
      assign_stmt "v3.i256 = add v2 32.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "add v2 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v2 v0;"
      inst_stmt "evm_mstore v2 v0"
        inst "evm_mstore v2 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v3 $PASSPORTCONTROL;"
      inst_stmt "evm_mstore v3 $PASSPORTCONTROL"
        inst "evm_mstore v3 $PASSPORTCONTROL"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "$PASSPORTCONTROL"
            value "$PASSPORTCONTROL"
              global_value "$PASSPORTCONTROL"
                gv_identifier "$PASSPORTCONTROL"
                  gv_name "PASSPORTCONTROL"
    stmt "v1.i256 = evm_keccak256 v2 64.i256;"
      assign_stmt "v1.i256 = evm_keccak256 v2 64.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v2 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "return v1;"
      inst_stmt "return v1"
        inst "return v1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "v1"
            value "v1"
              value_name "v1"
function "func private %isApprovedForAll(v0.i128, v1.i128) -> i1 {
  block0:
    v3.i256 = evm_malloc 64.i256;
    v4.i256 = add v3 32.i256;
    evm_mstore v3 v0;
    evm_mstore v4 $JOYSTICK;
    v2.i256 = evm_keccak256 v3 64.i256;
    return v2;
}"
  function_signature "func private %isApprovedForAll(v0.i128, v1.i128) -> i1"
    linkage "private"
    function_identifier "%isApprovedForAll"
      function_name "isApprovedForAll"
    function_params "(v0.i128, v1.i128)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
      value_declaration "v1.i128"
        value_name "v1"
        type_name "i128"
          primitive_type "i128"
    function_ret_type "-> i1"
      type_name "i1"
        primitive_type "i1"
  block "block0:
      v3.i256 = evm_malloc 64.i256;
      v4.i256 = add v3 32.i256;
      evm_mstore v3 v0;
      evm_mstore v4 $JOYSTICK;
      v2.i256 = evm_keccak256 v3 64.i256;
      return v2;"
    block_ident "block0"
      block_number "0"
    stmt "v3.i256 = evm_malloc 64.i256;"
      assign_stmt "v3.i256 = evm_malloc 64.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v4.i256 = add v3 32.i256;"
      assign_stmt "v4.i256 = add v3 32.i256"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "add v3 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v3 v0;"
      inst_stmt "evm_mstore v3 v0"
        inst "evm_mstore v3 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v4 $JOYSTICK;"
      inst_stmt "evm_mstore v4 $JOYSTICK"
        inst "evm_mstore v4 $JOYSTICK"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "$JOYSTICK"
            value "$JOYSTICK"
              global_value "$JOYSTICK"
                gv_identifier "$JOYSTICK"
                  gv_name "JOYSTICK"
    stmt "v2.i256 = evm_keccak256 v3 64.i256;"
      assign_stmt "v2.i256 = evm_keccak256 v3 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v3 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "return v2;"
      inst_stmt "return v2"
        inst "return v2"
          inst_name "return"
            inst_identifier "return"
          inst_arg "v2"
            value "v2"
              value_name "v2"
function "func private %tokenURI(v0.i256) -> i256 {
  block0:
    v1.i256 = mul 2816098579549735819167642334222623087267773311865828308853352799888687.i256 65536.i256;
    jump block2;
  block1:
    v2.i256 = div v0 10.i256;
    v3.i256 = mul v2 10.i256;
    v4.i256 = sub v0 v3;
    v5.i256 = add v4 48.i256;
    v6.i256 = mul v5 1.i256;
    v7.i256 = add 0.i256 v6;
    v8.i256 = mul 1.i256 256.i256;
    v9.i256 = div v0 10.i256;
    jump block2;
  block2:
    v10.i256 = phi (v9 block1) (v0 block0);
    v11.i256 = phi (v7 block1) (0.i256 block0);
    v12.i256 = phi (v8 block1) (1.i256 block0);
    v13.i256 = phi (v4 block1) (0.i256 block0);
    v14.i256 = phi (v3 block1) (0.i256 block0);
    v15.i256 = phi (v5 block1) (0.i256 block0);
    v16.i256 = phi (v6 block1) (0.i256 block0);
    br v10 block1 block3;
  block3:
    v17.i256 = add v11 v1;
    return v17;
}"
  function_signature "func private %tokenURI(v0.i256) -> i256"
    linkage "private"
    function_identifier "%tokenURI"
      function_name "tokenURI"
    function_params "(v0.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i256"
      type_name "i256"
        primitive_type "i256"
  block "block0:
      v1.i256 = mul 2816098579549735819167642334222623087267773311865828308853352799888687.i256 65536.i256;
      jump block2;"
    block_ident "block0"
      block_number "0"
    stmt "v1.i256 = mul 2816098579549735819167642334222623087267773311865828308853352799888687.i256 65536.i256;"
      assign_stmt "v1.i256 = mul 2816098579549735819167642334222623087267773311865828308853352799888687.i256 65536.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "mul 2816098579549735819167642334222623087267773311865828308853352799888687.i256 65536.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "2816098579549735819167642334222623087267773311865828308853352799888687.i256"
            value "2816098579549735819167642334222623087267773311865828308853352799888687.i256"
              imm_number "2816098579549735819167642334222623087267773311865828308853352799888687.i256"
                decimal "2816098579549735819167642334222623087267773311865828308853352799888687"
                primitive_type "i256"
          inst_arg "65536.i256"
            value "65536.i256"
              imm_number "65536.i256"
                decimal "65536"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block1:
      v2.i256 = div v0 10.i256;
      v3.i256 = mul v2 10.i256;
      v4.i256 = sub v0 v3;
      v5.i256 = add v4 48.i256;
      v6.i256 = mul v5 1.i256;
      v7.i256 = add 0.i256 v6;
      v8.i256 = mul 1.i256 256.i256;
      v9.i256 = div v0 10.i256;
      jump block2;"
    block_ident "block1"
      block_number "1"
    stmt "v2.i256 = div v0 10.i256;"
      assign_stmt "v2.i256 = div v0 10.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "div v0 10.i256"
          inst_name "div"
            inst_identifier "div"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "10.i256"
            value "10.i256"
              imm_number "10.i256"
                decimal "10"
                primitive_type "i256"
    stmt "v3.i256 = mul v2 10.i256;"
      assign_stmt "v3.i256 = mul v2 10.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "mul v2 10.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "10.i256"
            value "10.i256"
              imm_number "10.i256"
                decimal "10"
                primitive_type "i256"
    stmt "v4.i256 = sub v0 v3;"
      assign_stmt "v4.i256 = sub v0 v3"
        value_declaration "v4.i256"
          value_name "v4"
          type_name "i256"
            primitive_type "i256"
        inst "sub v0 v3"
          inst_name "sub"
            inst_identifier "sub"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "v3"
            value "v3"
              value_name "v3"
    stmt "v5.i256 = add v4 48.i256;"
      assign_stmt "v5.i256 = add v4 48.i256"
        value_declaration "v5.i256"
          value_name "v5"
          type_name "i256"
            primitive_type "i256"
        inst "add v4 48.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v4"
            value "v4"
              value_name "v4"
          inst_arg "48.i256"
            value "48.i256"
              imm_number "48.i256"
                decimal "48"
                primitive_type "i256"
    stmt "v6.i256 = mul v5 1.i256;"
      assign_stmt "v6.i256 = mul v5 1.i256"
        value_declaration "v6.i256"
          value_name "v6"
          type_name "i256"
            primitive_type "i256"
        inst "mul v5 1.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "v5"
            value "v5"
              value_name "v5"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
    stmt "v7.i256 = add 0.i256 v6;"
      assign_stmt "v7.i256 = add 0.i256 v6"
        value_declaration "v7.i256"
          value_name "v7"
          type_name "i256"
            primitive_type "i256"
        inst "add 0.i256 v6"
          inst_name "add"
            inst_identifier "add"
          inst_arg "0.i256"
            value "0.i256"
              imm_number "0.i256"
                decimal "0"
                primitive_type "i256"
          inst_arg "v6"
            value "v6"
              value_name "v6"
    stmt "v8.i256 = mul 1.i256 256.i256;"
      assign_stmt "v8.i256 = mul 1.i256 256.i256"
        value_declaration "v8.i256"
          value_name "v8"
          type_name "i256"
            primitive_type "i256"
        inst "mul 1.i256 256.i256"
          inst_name "mul"
            inst_identifier "mul"
          inst_arg "1.i256"
            value "1.i256"
              imm_number "1.i256"
                decimal "1"
                primitive_type "i256"
          inst_arg "256.i256"
            value "256.i256"
              imm_number "256.i256"
                decimal "256"
                primitive_type "i256"
    stmt "v9.i256 = div v0 10.i256;"
      assign_stmt "v9.i256 = div v0 10.i256"
        value_declaration "v9.i256"
          value_name "v9"
          type_name "i256"
            primitive_type "i256"
        inst "div v0 10.i256"
          inst_name "div"
            inst_identifier "div"
          inst_arg "v0"
            value "v0"
              value_name "v0"
          inst_arg "10.i256"
            value "10.i256"
              imm_number "10.i256"
                decimal "10"
                primitive_type "i256"
    stmt "jump block2;"
      inst_stmt "jump block2"
        inst "jump block2"
          inst_name "jump"
            inst_identifier "jump"
          inst_arg "block2"
            block_ident "block2"
              block_number "2"
  block "block2:
      v10.i256 = phi (v9 block1) (v0 block0);
      v11.i256 = phi (v7 block1) (0.i256 block0);
      v12.i256 = phi (v8 block1) (1.i256 block0);
      v13.i256 = phi (v4 block1) (0.i256 block0);
      v14.i256 = phi (v3 block1) (0.i256 block0);
      v15.i256 = phi (v5 block1) (0.i256 block0);
      v16.i256 = phi (v6 block1) (0.i256 block0);
      br v10 block1 block3;"
    block_ident "block2"
      block_number "2"
    stmt "v10.i256 = phi (v9 block1) (v0 block0);"
      assign_stmt "v10.i256 = phi (v9 block1) (v0 block0)"
        value_declaration "v10.i256"
          value_name "v10"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v9 block1) (v0 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v9 block1)"
            value_block_map "(v9 block1)"
              value "v9"
                value_name "v9"
              block_ident "block1"
                block_number "1"
          inst_arg "(v0 block0)"
            value_block_map "(v0 block0)"
              value "v0"
                value_name "v0"
              block_ident "block0"
                block_number "0"
    stmt "v11.i256 = phi (v7 block1) (0.i256 block0);"
      assign_stmt "v11.i256 = phi (v7 block1) (0.i256 block0)"
        value_declaration "v11.i256"
          value_name "v11"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v7 block1) (0.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v7 block1)"
            value_block_map "(v7 block1)"
              value "v7"
                value_name "v7"
              block_ident "block1"
                block_number "1"
          inst_arg "(0.i256 block0)"
            value_block_map "(0.i256 block0)"
              value "0.i256"
                imm_number "0.i256"
                  decimal "0"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "v12.i256 = phi (v8 block1) (1.i256 block0);"
      assign_stmt "v12.i256 = phi (v8 block1) (1.i256 block0)"
        value_declaration "v12.i256"
          value_name "v12"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v8 block1) (1.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v8 block1)"
            value_block_map "(v8 block1)"
              value "v8"
                value_name "v8"
              block_ident "block1"
                block_number "1"
          inst_arg "(1.i256 block0)"
            value_block_map "(1.i256 block0)"
              value "1.i256"
                imm_number "1.i256"
                  decimal "1"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "v13.i256 = phi (v4 block1) (0.i256 block0);"
      assign_stmt "v13.i256 = phi (v4 block1) (0.i256 block0)"
        value_declaration "v13.i256"
          value_name "v13"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v4 block1) (0.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v4 block1)"
            value_block_map "(v4 block1)"
              value "v4"
                value_name "v4"
              block_ident "block1"
                block_number "1"
          inst_arg "(0.i256 block0)"
            value_block_map "(0.i256 block0)"
              value "0.i256"
                imm_number "0.i256"
                  decimal "0"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "v14.i256 = phi (v3 block1) (0.i256 block0);"
      assign_stmt "v14.i256 = phi (v3 block1) (0.i256 block0)"
        value_declaration "v14.i256"
          value_name "v14"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v3 block1) (0.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v3 block1)"
            value_block_map "(v3 block1)"
              value "v3"
                value_name "v3"
              block_ident "block1"
                block_number "1"
          inst_arg "(0.i256 block0)"
            value_block_map "(0.i256 block0)"
              value "0.i256"
                imm_number "0.i256"
                  decimal "0"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "v15.i256 = phi (v5 block1) (0.i256 block0);"
      assign_stmt "v15.i256 = phi (v5 block1) (0.i256 block0)"
        value_declaration "v15.i256"
          value_name "v15"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v5 block1) (0.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v5 block1)"
            value_block_map "(v5 block1)"
              value "v5"
                value_name "v5"
              block_ident "block1"
                block_number "1"
          inst_arg "(0.i256 block0)"
            value_block_map "(0.i256 block0)"
              value "0.i256"
                imm_number "0.i256"
                  decimal "0"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "v16.i256 = phi (v6 block1) (0.i256 block0);"
      assign_stmt "v16.i256 = phi (v6 block1) (0.i256 block0)"
        value_declaration "v16.i256"
          value_name "v16"
          type_name "i256"
            primitive_type "i256"
        inst "phi (v6 block1) (0.i256 block0)"
          inst_name "phi"
            inst_identifier "phi"
          inst_arg "(v6 block1)"
            value_block_map "(v6 block1)"
              value "v6"
                value_name "v6"
              block_ident "block1"
                block_number "1"
          inst_arg "(0.i256 block0)"
            value_block_map "(0.i256 block0)"
              value "0.i256"
                imm_number "0.i256"
                  decimal "0"
                  primitive_type "i256"
              block_ident "block0"
                block_number "0"
    stmt "br v10 block1 block3;"
      inst_stmt "br v10 block1 block3"
        inst "br v10 block1 block3"
          inst_name "br"
            inst_identifier "br"
          inst_arg "v10"
            value "v10"
              value_name "v10"
          inst_arg "block1"
            block_ident "block1"
              block_number "1"
          inst_arg "block3"
            block_ident "block3"
              block_number "3"
  block "block3:
      v17.i256 = add v11 v1;
      return v17;"
    block_ident "block3"
      block_number "3"
    stmt "v17.i256 = add v11 v1;"
      assign_stmt "v17.i256 = add v11 v1"
        value_declaration "v17.i256"
          value_name "v17"
          type_name "i256"
            primitive_type "i256"
        inst "add v11 v1"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v11"
            value "v11"
              value_name "v11"
          inst_arg "v1"
            value "v1"
              value_name "v1"
    stmt "return v17;"
      inst_stmt "return v17"
        inst "return v17"
          inst_name "return"
            inst_identifier "return"
          inst_arg "v17"
            value "v17"
              value_name "v17"
function "func private %ownerOf(v0.i256) -> i128 {
  block0:
    v2.i256 = evm_malloc 64.i256;
    v3.i256 = add v2 32.i256;
    evm_mstore v2 v0;
    evm_mstore v3 $CROWN;
    v1.i256 = evm_keccak256 v2 64.i256;
    return v1;
}"
  function_signature "func private %ownerOf(v0.i256) -> i128"
    linkage "private"
    function_identifier "%ownerOf"
      function_name "ownerOf"
    function_params "(v0.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
    function_ret_type "-> i128"
      type_name "i128"
        primitive_type "i128"
  block "block0:
      v2.i256 = evm_malloc 64.i256;
      v3.i256 = add v2 32.i256;
      evm_mstore v2 v0;
      evm_mstore v3 $CROWN;
      v1.i256 = evm_keccak256 v2 64.i256;
      return v1;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i256 = evm_malloc 64.i256;"
      assign_stmt "v2.i256 = evm_malloc 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v3.i256 = add v2 32.i256;"
      assign_stmt "v3.i256 = add v2 32.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "add v2 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v2 v0;"
      inst_stmt "evm_mstore v2 v0"
        inst "evm_mstore v2 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v3 $CROWN;"
      inst_stmt "evm_mstore v3 $CROWN"
        inst "evm_mstore v3 $CROWN"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "$CROWN"
            value "$CROWN"
              global_value "$CROWN"
                gv_identifier "$CROWN"
                  gv_name "CROWN"
    stmt "v1.i256 = evm_keccak256 v2 64.i256;"
      assign_stmt "v1.i256 = evm_keccak256 v2 64.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v2 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "return v1;"
      inst_stmt "return v1"
        inst "return v1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "v1"
            value "v1"
              value_name "v1"
function "func private %balanceOf(v0.i128) -> i256 {
  block0:
    v2.i256 = evm_malloc 64.i256;
    v3.i256 = add v2 32.i256;
    evm_mstore v2 v0;
    evm_mstore v3 $ABACUS;
    v1.i256 = evm_keccak256 v2 64.i256;
    return v1;
}"
  function_signature "func private %balanceOf(v0.i128) -> i256"
    linkage "private"
    function_identifier "%balanceOf"
      function_name "balanceOf"
    function_params "(v0.i128)"
      value_declaration "v0.i128"
        value_name "v0"
        type_name "i128"
          primitive_type "i128"
    function_ret_type "-> i256"
      type_name "i256"
        primitive_type "i256"
  block "block0:
      v2.i256 = evm_malloc 64.i256;
      v3.i256 = add v2 32.i256;
      evm_mstore v2 v0;
      evm_mstore v3 $ABACUS;
      v1.i256 = evm_keccak256 v2 64.i256;
      return v1;"
    block_ident "block0"
      block_number "0"
    stmt "v2.i256 = evm_malloc 64.i256;"
      assign_stmt "v2.i256 = evm_malloc 64.i256"
        value_declaration "v2.i256"
          value_name "v2"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 64.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "v3.i256 = add v2 32.i256;"
      assign_stmt "v3.i256 = add v2 32.i256"
        value_declaration "v3.i256"
          value_name "v3"
          type_name "i256"
            primitive_type "i256"
        inst "add v2 32.i256"
          inst_name "add"
            inst_identifier "add"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v2 v0;"
      inst_stmt "evm_mstore v2 v0"
        inst "evm_mstore v2 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_mstore v3 $ABACUS;"
      inst_stmt "evm_mstore v3 $ABACUS"
        inst "evm_mstore v3 $ABACUS"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v3"
            value "v3"
              value_name "v3"
          inst_arg "$ABACUS"
            value "$ABACUS"
              global_value "$ABACUS"
                gv_identifier "$ABACUS"
                  gv_name "ABACUS"
    stmt "v1.i256 = evm_keccak256 v2 64.i256;"
      assign_stmt "v1.i256 = evm_keccak256 v2 64.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_keccak256 v2 64.i256"
          inst_name "evm_keccak256"
            inst_identifier "evm_keccak256"
          inst_arg "v2"
            value "v2"
              value_name "v2"
          inst_arg "64.i256"
            value "64.i256"
              imm_number "64.i256"
                decimal "64"
                primitive_type "i256"
    stmt "return v1;"
      inst_stmt "return v1"
        inst "return v1"
          inst_name "return"
            inst_identifier "return"
          inst_arg "v1"
            value "v1"
              value_name "v1"
function "func private %name() -> i256 {
  block0:
    return 1280710979558254200404.i256;
}"
  function_signature "func private %name() -> i256"
    linkage "private"
    function_identifier "%name"
      function_name "name"
    function_params "()"
    function_ret_type "-> i256"
      type_name "i256"
        primitive_type "i256"
  block "block0:
      return 1280710979558254200404.i256;"
    block_ident "block0"
      block_number "0"
    stmt "return 1280710979558254200404.i256;"
      inst_stmt "return 1280710979558254200404.i256"
        inst "return 1280710979558254200404.i256"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1280710979558254200404.i256"
            value "1280710979558254200404.i256"
              imm_number "1280710979558254200404.i256"
                decimal "1280710979558254200404"
                primitive_type "i256"
function "func private %symbol() -> i256 {
  block0:
    return 1162757716.i256;
}"
  function_signature "func private %symbol() -> i256"
    linkage "private"
    function_identifier "%symbol"
      function_name "symbol"
    function_params "()"
    function_ret_type "-> i256"
      type_name "i256"
        primitive_type "i256"
  block "block0:
      return 1162757716.i256;"
    block_ident "block0"
      block_number "0"
    stmt "return 1162757716.i256;"
      inst_stmt "return 1162757716.i256"
        inst "return 1162757716.i256"
          inst_name "return"
            inst_identifier "return"
          inst_arg "1162757716.i256"
            value "1162757716.i256"
              imm_number "1162757716.i256"
                decimal "1162757716"
                primitive_type "i256"
function "func private %returnUint(v0.i256) {
block0:
  v1.i256 = evm_malloc 32.i256;
  evm_mstore v1 v0;
  evm_return v1 32.i256;
}"
  function_signature "func private %returnUint(v0.i256) "
    linkage "private"
    function_identifier "%returnUint"
      function_name "returnUint"
    function_params "(v0.i256)"
      value_declaration "v0.i256"
        value_name "v0"
        type_name "i256"
          primitive_type "i256"
  block "block0:
    v1.i256 = evm_malloc 32.i256;
    evm_mstore v1 v0;
    evm_return v1 32.i256;"
    block_ident "block0"
      block_number "0"
    stmt "v1.i256 = evm_malloc 32.i256;"
      assign_stmt "v1.i256 = evm_malloc 32.i256"
        value_declaration "v1.i256"
          value_name "v1"
          type_name "i256"
            primitive_type "i256"
        inst "evm_malloc 32.i256"
          inst_name "evm_malloc"
            inst_identifier "evm_malloc"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
    stmt "evm_mstore v1 v0;"
      inst_stmt "evm_mstore v1 v0"
        inst "evm_mstore v1 v0"
          inst_name "evm_mstore"
            inst_identifier "evm_mstore"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "v0"
            value "v0"
              value_name "v0"
    stmt "evm_return v1 32.i256;"
      inst_stmt "evm_return v1 32.i256"
        inst "evm_return v1 32.i256"
          inst_name "evm_return"
            inst_identifier "evm_return"
          inst_arg "v1"
            value "v1"
              value_name "v1"
          inst_arg "32.i256"
            value "32.i256"
              imm_number "32.i256"
                decimal "32"
                primitive_type "i256"
